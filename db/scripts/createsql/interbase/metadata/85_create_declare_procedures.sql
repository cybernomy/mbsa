CREATE PROCEDURE ABS (
    SRC DOUBLE PRECISION)
RETURNS (
    DEST DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ACC_CALC_AVERAGE_OUTCOST (
    OPERDATE TIMESTAMP,
    ACC INTEGER,
    ANL1 INTEGER,
    ANL2 INTEGER,
    ANL3 INTEGER,
    ANL4 INTEGER,
    ANL5 INTEGER,
    CATALOG_ID INTEGER,
    CONTR INTEGER,
    QUANTITY NUMERIC(15,3))
RETURNS (
    COSTNAT NUMERIC(15,4),
    COSTCUR NUMERIC(15,4),
    SUMMANAT NUMERIC(15,4),
    SUMMACUR NUMERIC(15,4),
    REALQUAN NUMERIC(15,3))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ACC_CALC_REMNACC_END (
    ACC INTEGER,
    PERIOD_ID INTEGER,
    REMNBEGINNATDB NUMERIC(15,4),
    REMNBEGINNATKT NUMERIC(15,4),
    REMNBEGINCURDB NUMERIC(15,4),
    REMNBEGINCURKT NUMERIC(15,4),
    TURNNATDB NUMERIC(15,4),
    TURNNATKT NUMERIC(15,4),
    TURNCURDB NUMERIC(15,4),
    TURNCURKT NUMERIC(15,4))
RETURNS (
    REMNENDNATDB NUMERIC(15,4),
    REMNENDNATKT NUMERIC(15,4),
    REMNENDCURDB NUMERIC(15,4),
    REMNENDCURKT NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ACC_CALC_REMNANL_END (
    ACC INTEGER,
    PERIOD_ID INTEGER,
    ANL1 INTEGER,
    ANL2 INTEGER,
    ANL3 INTEGER,
    ANL4 INTEGER,
    ANL5 INTEGER,
    REMNBEGINNATDB NUMERIC(15,4),
    REMNBEGINNATKT NUMERIC(15,4),
    REMNBEGINCURDB NUMERIC(15,4),
    REMNBEGINCURKT NUMERIC(15,4),
    TURNNATDB NUMERIC(15,4),
    TURNNATKT NUMERIC(15,4),
    TURNCURDB NUMERIC(15,4),
    TURNCURKT NUMERIC(15,4))
RETURNS (
    REMNENDNATDB NUMERIC(15,4),
    REMNENDNATKT NUMERIC(15,4),
    REMNENDCURDB NUMERIC(15,4),
    REMNENDCURKT NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ACC_CALC_REMNDBKT_END (
    REMNBEGINNATDB NUMERIC(15,4),
    REMNBEGINNATKT NUMERIC(15,4),
    TURNNATDB NUMERIC(15,4),
    TURNNATKT NUMERIC(15,4),
    REMNBEGINCURDB NUMERIC(15,4),
    REMNBEGINCURKT NUMERIC(15,4),
    TURNCURDB NUMERIC(15,4),
    TURNCURKT NUMERIC(15,4))
RETURNS (
    REMNENDNATDB NUMERIC(15,4),
    REMNENDNATKT NUMERIC(15,4),
    REMNENDCURDB NUMERIC(15,4),
    REMNENDCURKT NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ACC_CALC_REMNVAL_END (
    BEGINQUAN NUMERIC(18,3),
    REMNBEGINNAT NUMERIC(18,4),
    REMNBEGINCUR NUMERIC(18,4),
    QUANTITYDB NUMERIC(18,3),
    QUANTITYKT NUMERIC(18,3),
    TURNNATDB NUMERIC(18,4),
    TURNNATKT NUMERIC(18,4),
    TURNCURDB NUMERIC(18,4),
    TURNCURKT NUMERIC(18,4))
RETURNS (
    ENDQUAN NUMERIC(18,3),
    REMNENDNAT NUMERIC(18,4),
    REMNENDCUR NUMERIC(18,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ACC_CARRY_FORWARD_BALANCE (
    PERIOD_ID INTEGER,
    ACCOUNT_ID INTEGER,
    REMANTKIND SMALLINT)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ACC_CARRY_FORWARD_BALANCE_ALL (
    PERIOD_ID INTEGER,
    REMANTKIND SMALLINT)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ACC_CHECK_LAST_BATCH (
    OPERDATE TIMESTAMP,
    ACCBATCH_ID INTEGER,
    QUANTITY NUMERIC(15,3),
    SUMMANAT NUMERIC(15,4),
    SUMMACUR NUMERIC(15,4))
RETURNS (
    REALSUMMANAT NUMERIC(15,4),
    REALSUMMACUR NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ACC_COPY_ACC_ANL (
    SRCACC INTEGER,
    DSTACC INTEGER,
    SRCPARENT INTEGER,
    DSTPARENT INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ACC_DEL_EMPTY_REMNACC (
    PERIOD1 INTEGER,
    PERIOD2 INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ACC_DEL_EMPTY_REMNANL (
    PERIOD1 INTEGER,
    PERIOD2 INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ACC_DEL_EMPTY_REMNDBKT (
    PERIOD1 INTEGER,
    PERIOD2 INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ACC_DEL_EMPTY_REMNVAL (
    PERIOD1 INTEGER,
    PERIOD2 INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ACC_GET_TURN_REALIZ_BASE (
    DATE1 TIMESTAMP,
    DATE2 TIMESTAMP,
    ACC_ID INTEGER)
RETURNS (
    COSTQUANT NUMERIC(15,3),
    COSTSUM NUMERIC(15,4),
    REALIZQUANT NUMERIC(15,3),
    REALIZSUM NUMERIC(15,4),
    PARTNER_CODE CHAR(20),
    DOCBASETYPE CHAR(15),
    DOCBASENUMBER CHAR(20),
    DOCBASEDATE TIMESTAMP)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ACC_GET_TURN_REALIZ_PRODUCT (
    DATE1 TIMESTAMP,
    DATE2 TIMESTAMP,
    ACC_ID INTEGER)
RETURNS (
    COSTQUANT NUMERIC(15,3),
    COSTSUM NUMERIC(15,4),
    REALIZQUANT NUMERIC(15,3),
    REALIZSUM NUMERIC(15,4),
    CATALOG_ID INTEGER,
    PARTNER_CODE CHAR(20))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ACC_INCLUDE_TURN_IN_REMNACC (
    ACC INTEGER,
    PERIOD_ID INTEGER)
RETURNS (
    REMNACC_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ACC_INCLUDE_TURN_IN_REMNANL (
    ACC INTEGER,
    ANL1 INTEGER,
    ANL2 INTEGER,
    ANL3 INTEGER,
    ANL4 INTEGER,
    ANL5 INTEGER,
    PERIOD_ID INTEGER)
RETURNS (
    REMNANL_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ACC_INCLUDE_TURN_IN_REMNDBKT (
    ACC INTEGER,
    ANLFORM SMALLINT,
    ANL1 INTEGER,
    ANL2 INTEGER,
    ANL3 INTEGER,
    ANL4 INTEGER,
    ANL5 INTEGER,
    PERIOD_ID INTEGER,
    TURNDB NUMERIC(15,4),
    TURNKT NUMERIC(15,4),
    TURNCURDB NUMERIC(15,4),
    TURNCURKT NUMERIC(15,4),
    CONTR INTEGER,
    DOCBASETYPE VARCHAR(15),
    DOCBASENUMBER VARCHAR(20),
    DOCBASEDATE TIMESTAMP,
    DOCTYPE VARCHAR(15),
    DOCNUMBER VARCHAR(20),
    DOCDATE TIMESTAMP,
    SPECMARK CHAR(20))
RETURNS (
    REMNDBKT_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ACC_INCLUDE_TURN_IN_REMNVAL (
    ACC INTEGER,
    ANL1 INTEGER,
    ANL2 INTEGER,
    ANL3 INTEGER,
    ANL4 INTEGER,
    ANL5 INTEGER,
    PERIOD_ID INTEGER,
    CATALOG_ID INTEGER,
    TURNDB NUMERIC(15,4),
    TURNKT NUMERIC(15,4),
    TURNCURDB NUMERIC(15,4),
    TURNCURKT NUMERIC(15,4),
    QUANTITYDB NUMERIC(15,3),
    QUANTITYKT NUMERIC(15,3),
    CONTR INTEGER,
    SPECMARK CHAR(20),
    ACCBATCH_ID INTEGER)
RETURNS (
    REMNVAL_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ACC_INV_FREEZE (
    INVID INTEGER,
    FREEZEDATE TIMESTAMP)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ACC_INV_MAKE_REMAINS (
    INVID INTEGER,
    PERIODID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ACC_INV_MOVE (
    INVID INTEGER,
    EOFOLDERID INTEGER,
    REGDATE TIMESTAMP,
    DOCTYPE CHAR(15),
    DOCNUMBER CHAR(20),
    DOCDATE TIMESTAMP,
    CONTR INTEGER,
    ACCINV INTEGER,
    ANLINV1ID INTEGER,
    ANLINV2ID INTEGER,
    ANLINV3ID INTEGER,
    ANLINV4ID INTEGER,
    ANLINV5ID INTEGER,
    ACCAM INTEGER,
    ANLAM1ID INTEGER,
    ANLAM2ID INTEGER,
    ANLAM3ID INTEGER,
    ANLAM4ID INTEGER,
    ANLAM5ID INTEGER,
    IL_ID INTEGER,
    USER_ID INTEGER,
    INOPERDOCNUM CHAR(20),
    INOPERDATE TIMESTAMP)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ACC_INV_RETIRE (
    INVID INTEGER,
    EOFOLDERID INTEGER,
    REGDATE TIMESTAMP,
    DOCTYPE CHAR(15),
    DOCNUMBER CHAR(20),
    DOCDATE TIMESTAMP,
    DOCBASETYPE CHAR(15),
    DOCBASENUMBER CHAR(20),
    DOCBASEDATE TIMESTAMP,
    ACC INTEGER,
    ANL1ID INTEGER,
    ANL2ID INTEGER,
    ANL3ID INTEGER,
    ANL4ID INTEGER,
    ANL5ID INTEGER,
    USER_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ACC_INV_REVALUATE (
    INVID INTEGER,
    EOFOLDERID INTEGER,
    REVALDATE TIMESTAMP,
    KIND SMALLINT,
    FACTOR DOUBLE PRECISION,
    AMOUNT NUMERIC(15,4),
    DELTA NUMERIC(15,4),
    DOCTYPE CHAR(15),
    DOCNUMBER CHAR(20),
    DOCDATE TIMESTAMP,
    BASEDOCTYPE CHAR(15),
    BASEDOCNUMBER CHAR(20),
    BASEDOCDATE TIMESTAMP,
    ACC INTEGER,
    ANL1ID INTEGER,
    ANL2ID INTEGER,
    ANL3ID INTEGER,
    ANL4ID INTEGER,
    ANL5ID INTEGER,
    USER_ID INTEGER,
    IS_OVERESTIMATE SMALLINT)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ACC_OSDB (
    ACC INTEGER,
    ADATE TIMESTAMP,
    ONBEGINDAY SMALLINT)
RETURNS (
    REMN NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ACC_OSKT (
    ACC INTEGER,
    ADATE TIMESTAMP,
    ONBEGINDAY SMALLINT)
RETURNS (
    REMN NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ACC_REMNACC_LOAD (
    REMN_ID INTEGER)
RETURNS (
    ID INTEGER,
    PERIOD_ID INTEGER,
    PNAME CHAR(20),
    ACC_ID INTEGER,
    ACC CHAR(20),
    ACCFOLDER_ID INTEGER,
    CURCODE CHAR(5),
    REMNBEGINNATDB NUMERIC(15,4),
    REMNBEGINNATKT NUMERIC(15,4),
    REMNBEGINCURDB NUMERIC(15,4),
    REMNBEGINCURKT NUMERIC(15,4),
    TURNNATDB NUMERIC(15,4),
    TURNNATKT NUMERIC(15,4),
    TURNCURDB NUMERIC(15,4),
    TURNCURKT NUMERIC(15,4),
    REMNENDNATDB NUMERIC(15,4),
    REMNENDNATKT NUMERIC(15,4),
    REMNENDCURDB NUMERIC(15,4),
    REMNENDCURKT NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ACC_REMNACC_SELECT (
    PERIOD1 INTEGER,
    PERIOD2 INTEGER,
    ACCOUNT INTEGER,
    ACCOUNT_FOLDER_ID INTEGER)
RETURNS (
    ID INTEGER,
    PERIOD_ID INTEGER,
    PNAME CHAR(20),
    DATEFROM TIMESTAMP,
    DATETO TIMESTAMP,
    ACC_ID INTEGER,
    ACC CHAR(20),
    ACCFOLDER_ID INTEGER,
    CURCODE CHAR(5),
    REMNBEGINNATDB NUMERIC(15,4),
    REMNBEGINNATKT NUMERIC(15,4),
    REMNBEGINCURDB NUMERIC(15,4),
    REMNBEGINCURKT NUMERIC(15,4),
    TURNNATDB NUMERIC(15,4),
    TURNNATKT NUMERIC(15,4),
    TURNCURDB NUMERIC(15,4),
    TURNCURKT NUMERIC(15,4),
    REMNENDNATDB NUMERIC(15,4),
    REMNENDNATKT NUMERIC(15,4),
    REMNENDCURDB NUMERIC(15,4),
    REMNENDCURKT NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ACC_REMNANL_LOAD (
    REMN_ID INTEGER)
RETURNS (
    ID INTEGER,
    PERIOD_ID INTEGER,
    PNAME CHAR(20),
    ACC_ID INTEGER,
    ACC CHAR(20),
    ACCFOLDER_ID INTEGER,
    CURCODE CHAR(5),
    ANL1_ID INTEGER,
    ANL2_ID INTEGER,
    ANL3_ID INTEGER,
    ANL4_ID INTEGER,
    ANL5_ID INTEGER,
    ANL1_CODE CHAR(10),
    ANL2_CODE CHAR(10),
    ANL3_CODE CHAR(10),
    ANL4_CODE CHAR(10),
    ANL5_CODE CHAR(10),
    REMNBEGINNATDB NUMERIC(15,4),
    REMNBEGINNATKT NUMERIC(15,4),
    REMNBEGINCURDB NUMERIC(15,4),
    REMNBEGINCURKT NUMERIC(15,4),
    TURNNATDB NUMERIC(15,4),
    TURNNATKT NUMERIC(15,4),
    TURNCURDB NUMERIC(15,4),
    TURNCURKT NUMERIC(15,4),
    REMNENDNATDB NUMERIC(15,4),
    REMNENDNATKT NUMERIC(15,4),
    REMNENDCURDB NUMERIC(15,4),
    REMNENDCURKT NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ACC_REMNANL_SELECT (
    PERIOD1 INTEGER,
    PERIOD2 INTEGER,
    ACCOUNT INTEGER,
    ACCOUNT_FOLDER_ID INTEGER)
RETURNS (
    ID INTEGER,
    PERIOD_ID INTEGER,
    PNAME CHAR(20),
    DATEFROM TIMESTAMP,
    DATETO TIMESTAMP,
    ACC_ID INTEGER,
    ACC CHAR(20),
    ACCFOLDER_ID INTEGER,
    CURCODE CHAR(5),
    ANL1_ID INTEGER,
    ANL2_ID INTEGER,
    ANL3_ID INTEGER,
    ANL4_ID INTEGER,
    ANL5_ID INTEGER,
    ANL1_CODE CHAR(10),
    ANL2_CODE CHAR(10),
    ANL3_CODE CHAR(10),
    ANL4_CODE CHAR(10),
    ANL5_CODE CHAR(10),
    REMNBEGINNATDB NUMERIC(15,4),
    REMNBEGINNATKT NUMERIC(15,4),
    REMNBEGINCURDB NUMERIC(15,4),
    REMNBEGINCURKT NUMERIC(15,4),
    TURNNATDB NUMERIC(15,4),
    TURNNATKT NUMERIC(15,4),
    TURNCURDB NUMERIC(15,4),
    TURNCURKT NUMERIC(15,4),
    REMNENDNATDB NUMERIC(15,4),
    REMNENDNATKT NUMERIC(15,4),
    REMNENDCURDB NUMERIC(15,4),
    REMNENDCURKT NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ACC_REMNDBKT_LOAD (
    REMN_ID INTEGER)
RETURNS (
    ID INTEGER,
    PERIOD_ID INTEGER,
    PNAME CHAR(20),
    ACC_ID INTEGER,
    ACC CHAR(20),
    ACCFOLDER_ID INTEGER,
    CURCODE CHAR(5),
    ANL1_ID INTEGER,
    ANL2_ID INTEGER,
    ANL3_ID INTEGER,
    ANL4_ID INTEGER,
    ANL5_ID INTEGER,
    ANL1_CODE CHAR(10),
    ANL2_CODE CHAR(10),
    ANL3_CODE CHAR(10),
    ANL4_CODE CHAR(10),
    ANL5_CODE CHAR(10),
    CONTRACTOR_ID INTEGER,
    CONTRACTORCODE CHAR(20),
    CONTRACTORFOLDERID INTEGER,
    CONTRACTORKIND SMALLINT,
    RISEDEBTS TIMESTAMP,
    CLEARDEBTS TIMESTAMP,
    COMMENT VARCHAR(256),
    DOCBASETYPE CHAR(15),
    DOCBASENUMBER CHAR(20),
    DOCBASEDATE TIMESTAMP,
    DOCTYPE CHAR(15),
    DOCNUMBER CHAR(20),
    DOCDATE TIMESTAMP,
    REMNBEGINNATDB NUMERIC(15,4),
    REMNBEGINNATKT NUMERIC(15,4),
    REMNBEGINCURDB NUMERIC(15,4),
    REMNBEGINCURKT NUMERIC(15,4),
    TURNNATDB NUMERIC(15,4),
    TURNNATKT NUMERIC(15,4),
    TURNCURDB NUMERIC(15,4),
    TURNCURKT NUMERIC(15,4),
    REMNENDNATDB NUMERIC(15,4),
    REMNENDNATKT NUMERIC(15,4),
    REMNENDCURDB NUMERIC(15,4),
    REMNENDCURKT NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ACC_REMNDBKT_SELECT (
    PERIOD1 INTEGER,
    PERIOD2 INTEGER,
    ACCOUNT INTEGER)
RETURNS (
    ID INTEGER,
    PERIOD_ID INTEGER,
    PNAME CHAR(20),
    DATEFROM TIMESTAMP,
    DATETO TIMESTAMP,
    ACC_ID INTEGER,
    ACC CHAR(20),
    ACCFOLDER_ID INTEGER,
    CURCODE CHAR(5),
    ANL1_ID INTEGER,
    ANL2_ID INTEGER,
    ANL3_ID INTEGER,
    ANL4_ID INTEGER,
    ANL5_ID INTEGER,
    ANL1_CODE CHAR(10),
    ANL2_CODE CHAR(10),
    ANL3_CODE CHAR(10),
    ANL4_CODE CHAR(10),
    ANL5_CODE CHAR(10),
    CONTRACTOR_ID INTEGER,
    CONTRACTORCODE CHAR(20),
    CONTRACTORUPCODE CHAR(20),
    CONTRACTORFOLDERID INTEGER,
    DOCBASETYPE CHAR(15),
    DOCBASENUMBER CHAR(20),
    DOCBASEDATE TIMESTAMP,
    DOCTYPE CHAR(15),
    DOCNUMBER CHAR(20),
    DOCDATE TIMESTAMP,
    REMNBEGINNATDB NUMERIC(15,4),
    REMNBEGINNATKT NUMERIC(15,4),
    REMNBEGINCURDB NUMERIC(15,4),
    REMNBEGINCURKT NUMERIC(15,4),
    TURNNATDB NUMERIC(15,4),
    TURNNATKT NUMERIC(15,4),
    TURNCURDB NUMERIC(15,4),
    TURNCURKT NUMERIC(15,4),
    REMNENDNATDB NUMERIC(15,4),
    REMNENDNATKT NUMERIC(15,4),
    REMNENDCURDB NUMERIC(15,4),
    REMNENDCURKT NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ACC_REMNDBKT_SELECT_BY_CONTR (
    PERIOD1 INTEGER,
    PERIOD2 INTEGER,
    CONTR_ID INTEGER)
RETURNS (
    ID INTEGER,
    PERIOD_ID INTEGER,
    PNAME CHAR(20),
    DATEFROM TIMESTAMP,
    DATETO TIMESTAMP,
    ACC_ID INTEGER,
    ACC CHAR(20),
    ACCFOLDER_ID INTEGER,
    CURCODE CHAR(5),
    ANL1_ID INTEGER,
    ANL2_ID INTEGER,
    ANL3_ID INTEGER,
    ANL4_ID INTEGER,
    ANL5_ID INTEGER,
    ANL1_CODE CHAR(10),
    ANL2_CODE CHAR(10),
    ANL3_CODE CHAR(10),
    ANL4_CODE CHAR(10),
    ANL5_CODE CHAR(10),
    CONTRACTOR_ID INTEGER,
    CONTRACTORCODE CHAR(20),
    CONTRACTORUPCODE CHAR(20),
    CONTRACTORFOLDERID INTEGER,
    DOCBASETYPE CHAR(15),
    DOCBASENUMBER CHAR(20),
    DOCBASEDATE TIMESTAMP,
    DOCTYPE CHAR(15),
    DOCNUMBER CHAR(20),
    DOCDATE TIMESTAMP,
    REMNBEGINNATDB NUMERIC(15,4),
    REMNBEGINNATKT NUMERIC(15,4),
    REMNBEGINCURDB NUMERIC(15,4),
    REMNBEGINCURKT NUMERIC(15,4),
    TURNNATDB NUMERIC(15,4),
    TURNNATKT NUMERIC(15,4),
    TURNCURDB NUMERIC(15,4),
    TURNCURKT NUMERIC(15,4),
    REMNENDNATDB NUMERIC(15,4),
    REMNENDNATKT NUMERIC(15,4),
    REMNENDCURDB NUMERIC(15,4),
    REMNENDCURKT NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ACC_REMNDBKT_SELECT_CONTR (
    PERIOD1 INTEGER,
    PERIOD2 INTEGER,
    INCONTRACTOR_ID INTEGER)
RETURNS (
    ID INTEGER,
    PERIOD_ID INTEGER,
    PNAME CHAR(20),
    DATEFROM TIMESTAMP,
    DATETO TIMESTAMP,
    ACC_ID INTEGER,
    ACC CHAR(20),
    ACCFOLDER_ID INTEGER,
    CURCODE CHAR(5),
    ANL1_ID INTEGER,
    ANL2_ID INTEGER,
    ANL3_ID INTEGER,
    ANL4_ID INTEGER,
    ANL5_ID INTEGER,
    ANL1_CODE CHAR(10),
    ANL2_CODE CHAR(10),
    ANL3_CODE CHAR(10),
    ANL4_CODE CHAR(10),
    ANL5_CODE CHAR(10),
    CONTRACTOR_ID INTEGER,
    CONTRACTORCODE CHAR(20),
    CONTRACTORUPCODE CHAR(20),
    CONTRACTORFOLDERID INTEGER,
    DOCBASETYPE CHAR(15),
    DOCBASENUMBER CHAR(20),
    DOCBASEDATE TIMESTAMP,
    DOCTYPE CHAR(15),
    DOCNUMBER CHAR(20),
    DOCDATE TIMESTAMP,
    REMNBEGINNATDB NUMERIC(15,4),
    REMNBEGINNATKT NUMERIC(15,4),
    REMNBEGINCURDB NUMERIC(15,4),
    REMNBEGINCURKT NUMERIC(15,4),
    TURNNATDB NUMERIC(15,4),
    TURNNATKT NUMERIC(15,4),
    TURNCURDB NUMERIC(15,4),
    TURNCURKT NUMERIC(15,4),
    REMNENDNATDB NUMERIC(15,4),
    REMNENDNATKT NUMERIC(15,4),
    REMNENDCURDB NUMERIC(15,4),
    REMNENDCURKT NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ACC_REMNDBKT_SELECT_CONTR_ACC (
    PERIOD1 INTEGER,
    PERIOD2 INTEGER,
    INCONTRACTOR_ID INTEGER,
    INACC_ID INTEGER)
RETURNS (
    ID INTEGER,
    PERIOD_ID INTEGER,
    PNAME CHAR(20),
    DATEFROM TIMESTAMP,
    DATETO TIMESTAMP,
    ACC_ID INTEGER,
    ACC CHAR(20),
    ACCFOLDER_ID INTEGER,
    CURCODE CHAR(5),
    ANL1_ID INTEGER,
    ANL2_ID INTEGER,
    ANL3_ID INTEGER,
    ANL4_ID INTEGER,
    ANL5_ID INTEGER,
    ANL1_CODE CHAR(10),
    ANL2_CODE CHAR(10),
    ANL3_CODE CHAR(10),
    ANL4_CODE CHAR(10),
    ANL5_CODE CHAR(10),
    CONTRACTOR_ID INTEGER,
    CONTRACTORCODE CHAR(20),
    CONTRACTORUPCODE CHAR(20),
    CONTRACTORFOLDERID INTEGER,
    DOCBASETYPE CHAR(15),
    DOCBASENUMBER CHAR(20),
    DOCBASEDATE TIMESTAMP,
    DOCTYPE CHAR(15),
    DOCNUMBER CHAR(20),
    DOCDATE TIMESTAMP,
    REMNBEGINNATDB NUMERIC(15,4),
    REMNBEGINNATKT NUMERIC(15,4),
    REMNBEGINCURDB NUMERIC(15,4),
    REMNBEGINCURKT NUMERIC(15,4),
    TURNNATDB NUMERIC(15,4),
    TURNNATKT NUMERIC(15,4),
    TURNCURDB NUMERIC(15,4),
    TURNCURKT NUMERIC(15,4),
    REMNENDNATDB NUMERIC(15,4),
    REMNENDNATKT NUMERIC(15,4),
    REMNENDCURDB NUMERIC(15,4),
    REMNENDCURKT NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ACC_REMNDBKT_SELECT_CONTR_BD (
    PERIOD1 INTEGER,
    PERIOD2 INTEGER,
    INCONTRACTOR_ID INTEGER,
    BASEDOCTYPE CHAR(15),
    BASEDOCNUMBER CHAR(20),
    BASEDOCDATE TIMESTAMP)
RETURNS (
    ID INTEGER,
    PERIOD_ID INTEGER,
    PNAME CHAR(20),
    DATEFROM TIMESTAMP,
    DATETO TIMESTAMP,
    ACC_ID INTEGER,
    ACC CHAR(20),
    ACCFOLDER_ID INTEGER,
    CURCODE CHAR(5),
    ANL1_ID INTEGER,
    ANL2_ID INTEGER,
    ANL3_ID INTEGER,
    ANL4_ID INTEGER,
    ANL5_ID INTEGER,
    ANL1_CODE CHAR(10),
    ANL2_CODE CHAR(10),
    ANL3_CODE CHAR(10),
    ANL4_CODE CHAR(10),
    ANL5_CODE CHAR(10),
    CONTRACTOR_ID INTEGER,
    CONTRACTORCODE CHAR(20),
    CONTRACTORUPCODE CHAR(20),
    CONTRACTORFOLDERID INTEGER,
    DOCBASETYPE CHAR(15),
    DOCBASENUMBER CHAR(20),
    DOCBASEDATE TIMESTAMP,
    DOCTYPE CHAR(15),
    DOCNUMBER CHAR(20),
    DOCDATE TIMESTAMP,
    REMNBEGINNATDB NUMERIC(15,4),
    REMNBEGINNATKT NUMERIC(15,4),
    REMNBEGINCURDB NUMERIC(15,4),
    REMNBEGINCURKT NUMERIC(15,4),
    TURNNATDB NUMERIC(15,4),
    TURNNATKT NUMERIC(15,4),
    TURNCURDB NUMERIC(15,4),
    TURNCURKT NUMERIC(15,4),
    REMNENDNATDB NUMERIC(15,4),
    REMNENDNATKT NUMERIC(15,4),
    REMNENDCURDB NUMERIC(15,4),
    REMNENDCURKT NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ACC_REMNVAL_CALC_ROW (
    ID INTEGER,
    BEGINQUAN NUMERIC(15,4),
    REMNBEGINNAT NUMERIC(15,4),
    REMNBEGINCUR NUMERIC(15,4))
RETURNS (
    ENDQUAN NUMERIC(15,3),
    REMNENDNAT NUMERIC(15,4),
    REMNENDCUR NUMERIC(15,4),
    QUANTITYDB NUMERIC(15,3),
    QUANTITYKT NUMERIC(15,3),
    TURNNATDB NUMERIC(15,4),
    TURNNATKT NUMERIC(15,4),
    TURNCURDB NUMERIC(15,4),
    TURNCURKT NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ACC_REMNVAL_LOAD (
    REMN_ID INTEGER)
RETURNS (
    ID INTEGER,
    PERIOD_ID INTEGER,
    PNAME CHAR(20),
    ACC_ID INTEGER,
    ACC CHAR(20),
    ACCFOLDER_ID INTEGER,
    CURCODE CHAR(5),
    ANL1_ID INTEGER,
    ANL2_ID INTEGER,
    ANL3_ID INTEGER,
    ANL4_ID INTEGER,
    ANL5_ID INTEGER,
    ANL1_CODE CHAR(10),
    ANL2_CODE CHAR(10),
    ANL3_CODE CHAR(10),
    ANL4_CODE CHAR(10),
    ANL5_CODE CHAR(10),
    CONTRACTOR_ID INTEGER,
    CONTRACTORCODE CHAR(20),
    CONTRACTORFOLDERID INTEGER,
    CONTRACTORKIND SMALLINT,
    CATALOG_ID INTEGER,
    CATALOGFOLDERID INTEGER,
    CATALOGCODE CHAR(20),
    CATALOGNAME VARCHAR(80),
    CATALOGMEASURE1 CHAR(5),
    BATCH_ID INTEGER,
    REMNBEGINNAT NUMERIC(15,4),
    REMNBEGINCUR NUMERIC(15,4),
    BEGINQUAN NUMERIC(15,3),
    TURNNATDB NUMERIC(15,4),
    TURNNATKT NUMERIC(15,4),
    TURNCURDB NUMERIC(15,4),
    TURNCURKT NUMERIC(15,4),
    QUANTITYDB NUMERIC(15,3),
    QUANTITYKT NUMERIC(15,3),
    REMNENDNAT NUMERIC(15,4),
    REMNENDCUR NUMERIC(15,4),
    ENDQUAN NUMERIC(15,3))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ACC_REMNVAL_SELECT (
    PERIOD1 INTEGER,
    PERIOD2 INTEGER,
    ACCOUNT INTEGER)
RETURNS (
    ID INTEGER,
    PERIOD_ID INTEGER,
    PNAME CHAR(20),
    DATEFROM TIMESTAMP,
    DATETO TIMESTAMP,
    ACC_ID INTEGER,
    ACC CHAR(20),
    ACCFOLDER_ID INTEGER,
    CURCODE CHAR(5),
    ANL1_ID INTEGER,
    ANL2_ID INTEGER,
    ANL3_ID INTEGER,
    ANL4_ID INTEGER,
    ANL5_ID INTEGER,
    ANL1_CODE CHAR(10),
    ANL2_CODE CHAR(10),
    ANL3_CODE CHAR(10),
    ANL4_CODE CHAR(10),
    ANL5_CODE CHAR(10),
    CONTRACTOR_ID INTEGER,
    CONTRACTORCODE CHAR(20),
    CONTRACTORUPCODE CHAR(20),
    CONTRACTORFOLDERID INTEGER,
    CATALOG_ID INTEGER,
    CATALOGFOLDER_ID INTEGER,
    CATCODE CHAR(20),
    CATNAME VARCHAR(80),
    CATMEAS CHAR(5),
    REMNBEGINNAT NUMERIC(15,4),
    REMNBEGINCUR NUMERIC(15,4),
    BEGINQUAN NUMERIC(15,4),
    TURNNATDB NUMERIC(15,4),
    TURNNATKT NUMERIC(15,4),
    TURNCURDB NUMERIC(15,4),
    TURNCURKT NUMERIC(15,4),
    QUANTITYDB NUMERIC(15,3),
    QUANTITYKT NUMERIC(15,3),
    REMNENDNAT NUMERIC(15,4),
    REMNENDCUR NUMERIC(15,4),
    ENDQUAN NUMERIC(15,3))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ACC_REMNVAL_SELECT_BY_CONTR (
    PERIOD1 INTEGER,
    PERIOD2 INTEGER,
    CONTR_ID INTEGER)
RETURNS (
    ID INTEGER,
    PERIOD_ID INTEGER,
    PNAME CHAR(20),
    DATEFROM TIMESTAMP,
    DATETO TIMESTAMP,
    ACC_ID INTEGER,
    ACC CHAR(20),
    ACCFOLDER_ID INTEGER,
    CURCODE CHAR(5),
    ANL1_ID INTEGER,
    ANL2_ID INTEGER,
    ANL3_ID INTEGER,
    ANL4_ID INTEGER,
    ANL5_ID INTEGER,
    ANL1_CODE CHAR(10),
    ANL2_CODE CHAR(10),
    ANL3_CODE CHAR(10),
    ANL4_CODE CHAR(10),
    ANL5_CODE CHAR(10),
    CONTRACTOR_ID INTEGER,
    CONTRACTORCODE CHAR(20),
    CONTRACTORUPCODE CHAR(20),
    CONTRACTORFOLDERID INTEGER,
    CATALOG_ID INTEGER,
    CATALOGFOLDER_ID INTEGER,
    CATCODE CHAR(20),
    CATNAME VARCHAR(80),
    CATMEAS CHAR(5),
    REMNBEGINNAT NUMERIC(15,4),
    REMNBEGINCUR NUMERIC(15,4),
    BEGINQUAN NUMERIC(15,4),
    TURNNATDB NUMERIC(15,4),
    TURNNATKT NUMERIC(15,4),
    TURNCURDB NUMERIC(15,4),
    TURNCURKT NUMERIC(15,4),
    QUANTITYDB NUMERIC(15,3),
    QUANTITYKT NUMERIC(15,3),
    REMNENDNAT NUMERIC(15,4),
    REMNENDCUR NUMERIC(15,4),
    ENDQUAN NUMERIC(15,3))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ACC_REMNVAL_SELECT_BY_CONTR_CAT (
    PERIOD1 INTEGER,
    PERIOD2 INTEGER,
    CONTR INTEGER,
    CATT INTEGER)
RETURNS (
    ID INTEGER,
    BATCH_ID INTEGER,
    PERIOD_ID INTEGER,
    PNAME CHAR(20),
    DATEFROM TIMESTAMP,
    DATETO TIMESTAMP,
    ACC_ID INTEGER,
    ACC CHAR(20),
    ACCFOLDER_ID INTEGER,
    CURCODE CHAR(5),
    ANL1_ID INTEGER,
    ANL2_ID INTEGER,
    ANL3_ID INTEGER,
    ANL4_ID INTEGER,
    ANL5_ID INTEGER,
    ANL1_CODE CHAR(10),
    ANL2_CODE CHAR(10),
    ANL3_CODE CHAR(10),
    ANL4_CODE CHAR(10),
    ANL5_CODE CHAR(10),
    CONTRACTOR_ID INTEGER,
    CONTRACTORCODE CHAR(20),
    CONTRACTORUPCODE CHAR(20),
    CONTRACTORFOLDERID INTEGER,
    CATALOG_ID INTEGER,
    CATALOGFOLDER_ID INTEGER,
    CATCODE CHAR(20),
    CATNAME VARCHAR(80),
    CATMEAS CHAR(5),
    REMNBEGINNAT NUMERIC(15,4),
    REMNBEGINCUR NUMERIC(15,4),
    BEGINQUAN NUMERIC(15,4),
    TURNNATDB NUMERIC(15,4),
    TURNNATKT NUMERIC(15,4),
    TURNCURDB NUMERIC(15,4),
    TURNCURKT NUMERIC(15,4),
    QUANTITYDB NUMERIC(15,3),
    QUANTITYKT NUMERIC(15,3),
    REMNENDNAT NUMERIC(15,4),
    REMNENDCUR NUMERIC(15,4),
    ENDQUAN NUMERIC(15,3))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ACC_ROLLBACK_INVHISTORY (
    HISTORY_ID INTEGER,
    USER_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ACC_UPDATE_ALL_REMN (
    ECONOMICOPER_ID INTEGER,
    OPERDATE TIMESTAMP,
    ISDELETE SMALLINT,
    FROM_ID INTEGER,
    TO_ID INTEGER,
    DOCBASETYPE VARCHAR(15),
    DOCBASENUMBER VARCHAR(20),
    DOCBASEDATE TIMESTAMP,
    DOCTYPE VARCHAR(15),
    DOCNUMBER VARCHAR(20),
    DOCDATE TIMESTAMP,
    CONTRACTTYPE VARCHAR(15),
    CONTRACTNUMBER VARCHAR(20),
    CONTRACTDATE TIMESTAMP,
    SPECMARK CHAR(20))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE C_F_CONTRACT_FACT_PLAN_SUM (
    DOCHEAD_ID INTEGER)
RETURNS (
    PLANSUM NUMERIC(15,3),
    FACTSUM NUMERIC(15,3),
    SHIPPEDPLAN NUMERIC(15,3),
    RECEIVEPLAN NUMERIC(15,3),
    SHIPPEDGOODPLAN NUMERIC(15,3),
    RECEIVEGOODPLAN NUMERIC(15,3),
    SHIPPEDFACT NUMERIC(15,3),
    RECEIVEFACT NUMERIC(15,3),
    SHIPPEDGOODFACT NUMERIC(15,3),
    RECEIVEGOODFACT NUMERIC(15,3))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CASH_BOOK (
    ACC INTEGER,
    DATE1 TIMESTAMP,
    DATE2 TIMESTAMP)
RETURNS (
    DOCNUM CHAR(20),
    CONTR CHAR(20),
    CORRACC CHAR(20),
    DBSUM NUMERIC(15,4),
    KTSUM NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CASH_BOOK_SORT (
    ACC_ID INTEGER,
    DATE1 TIMESTAMP,
    DATE2 TIMESTAMP)
RETURNS (
    DOCNUM CHAR(20),
    CONTR CHAR(20),
    CORRACC CHAR(20),
    DBSUM NUMERIC(15,4),
    KTSUM NUMERIC(15,4),
    KIND INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ENCODEDATE (
    AYEAR INTEGER,
    AMONTH INTEGER,
    ADAY INTEGER)
RETURNS (
    RESULT TIMESTAMP)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_ACCREMN_FOR_PERIOD (
    PERIOD1 INTEGER,
    PERIOD2 INTEGER,
    SPECMARK CHAR(20),
    GETREMN SMALLINT,
    GETENDREMN SMALLINT,
    GETTURN SMALLINT)
RETURNS (
    ACC INTEGER,
    REMNDB NUMERIC(15,4),
    REMNKT NUMERIC(15,4),
    TURNDB NUMERIC(15,4),
    TURNKT NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_ADD_PERIOD_TO_DATE (
    DATE1 TIMESTAMP,
    PERIOD_QUAN INTEGER,
    PERIOD_KIND SMALLINT)
RETURNS (
    DATE2 TIMESTAMP)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_CALC_CATALOG_PRICE (
    CATALOG_ID INTEGER,
    OPERDATE DATE,
    CURCODE_IN VARCHAR(5))
RETURNS (
    RESULT DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_CALC_DEAD_DATE (
    ADATE TIMESTAMP,
    ASHELFLIFE INTEGER,
    ASHELFLIFE_MEAS INTEGER)
RETURNS (
    RESULT TIMESTAMP)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_CALC_REMANTACC_ONDATE (
    ACC INTEGER,
    ADATE TIMESTAMP,
    ONBEGINDAY SMALLINT)
RETURNS (
    REMANT_NAT_DB NUMERIC(15,4),
    REMANT_CUR_DB NUMERIC(15,4),
    REMANT_NAT_KT NUMERIC(15,4),
    REMANT_CUR_KT NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_CALCULATE_DOCSPEC_BY_CATALOG (
    DOCUMENT_ID INTEGER,
    OPERDATE DATE,
    KIND INTEGER)
RETURNS (
    SPEC_ID INTEGER,
    CATALOG_ID INTEGER,
    QUAN NUMERIC(15,3),
    DOCDATE DATE,
    CURCODE_OUT VARCHAR(5),
    COSTNAT NUMERIC(15,4),
    COSTCUR NUMERIC(15,4),
    SUMNAT NUMERIC(15,4),
    DOCSECTION INTEGER,
    TAXGROUP_ID INTEGER,
    CALCTAXESKIND_ID INTEGER,
    TAXES_SUM NUMERIC(15,4),
    SPEC_SUM NUMERIC(15,4),
    SPEC_PRICE NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_CALCULATE_OUT_COST (
    OPERDATE TIMESTAMP,
    ACCBATCH_ID INTEGER,
    ACC INTEGER,
    ANL1 INTEGER,
    ANL2 INTEGER,
    ANL3 INTEGER,
    ANL4 INTEGER,
    ANL5 INTEGER,
    CATALOG_ID INTEGER,
    CONTR INTEGER,
    QUANTITY NUMERIC(15,3))
RETURNS (
    COSTNAT NUMERIC(15,4),
    COSTCUR NUMERIC(15,4),
    SUMMANAT NUMERIC(15,4),
    SUMMACUR NUMERIC(15,4),
    REALQUAN NUMERIC(15,3),
    ACCBATCH INTEGER,
    ACCBATCHHIST INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_CALCULATE_OUT_COST_ANL (
    OPERDATE DATE,
    ACC INTEGER,
    ANL1 INTEGER,
    ANL2 INTEGER,
    ANL3 INTEGER,
    ANL4 INTEGER,
    ANL5 INTEGER,
    CATALOG_ID INTEGER,
    CONTR INTEGER,
    QUANTITY NUMERIC(15,3))
RETURNS (
    RESULT NUMERIC(15,2))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_CALCULATE_OUT_COST_FORM (
    OPERDATE TIMESTAMP,
    ACC INTEGER,
    CATALOG_ID INTEGER,
    CONTR INTEGER,
    QUANTITY NUMERIC(15,3))
RETURNS (
    RESULT NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_CALCULATE_QUANTITY_END (
    OPERDATE DATE,
    ACCBATCH_ID INTEGER,
    ACC INTEGER,
    ANL1 INTEGER,
    ANL2 INTEGER,
    ANL3 INTEGER,
    ANL4 INTEGER,
    ANL5 INTEGER,
    CATALOG_ID INTEGER,
    CONTR INTEGER)
RETURNS (
    RESULT NUMERIC(15,3))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_CATFOLD_IS_BRANCH_MEMBER (
    FOLDER_ID INTEGER,
    BRANCHHEAD_ID INTEGER)
RETURNS (
    RESULT SMALLINT)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_CHECK_DOCUMENT_NUMBER (
    FOLDERTYPE SMALLINT,
    DOCTYPE CHAR(15),
    DOCNUMBER CHAR(20))
RETURNS (
    ISFIND SMALLINT)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_CREATE_ACCBATCH (
    INCOMEDATE TIMESTAMP,
    ACC INTEGER,
    ANL1 INTEGER,
    ANL2 INTEGER,
    ANL3 INTEGER,
    ANL4 INTEGER,
    ANL5 INTEGER,
    CATALOG_ID INTEGER,
    DOCSECTION SMALLINT,
    DOC_ID INTEGER,
    DOCTYPE VARCHAR(15),
    DOCNUMBER VARCHAR(20),
    DOCDATE TIMESTAMP,
    BEGINQUAN NUMERIC(15,3),
    SUMMANAT NUMERIC(15,4),
    SUMMACUR NUMERIC(15,4),
    CONTR INTEGER,
    OLDACCBATCH_ID INTEGER)
RETURNS (
    ACCBATCH_ID INTEGER,
    ACCBATCHHISTORY_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_CREATE_STOCKBATCH (
    STOCKCARD_ID INTEGER,
    CREATEDATE TIMESTAMP,
    CONTRACTOR_ID INTEGER,
    DOC_ID INTEGER,
    DOCSPEC_ID INTEGER,
    DOCTYPE CHAR(15),
    DOCNUMBER CHAR(20),
    DOCDATE TIMESTAMP,
    QUAN NUMERIC(15,3),
    PRICENAT NUMERIC(15,4),
    PRICECUR NUMERIC(15,4),
    CURR_CODE CHAR(5),
    CATALOG_ID INTEGER,
    PREV_SBH INTEGER,
    BESTBEFORE TIMESTAMP)
RETURNS (
    STOCKBATCHIST_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_DATE_SEQUENCE (
    DATE1 DATE,
    DATE2 DATE)
RETURNS (
    RESULT DATE)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_DOC_HEAD_STATE_BROWSE (
    DOCACTION_ID INTEGER)
RETURNS (
    ID INTEGER,
    READYSUMMA NUMERIC(15,4),
    DOCSECTIONNAME VARCHAR(80),
    DOCUMENT VARCHAR(256),
    DATETIME TIMESTAMP,
    USERNAME CHAR(31),
    CREATE_DOC SMALLINT,
    DATA1 INTEGER,
    DATA2 INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_DOCUMENTCAPTION (
    DOCSECTION INTEGER,
    DOC_ID INTEGER)
RETURNS (
    RESULT VARCHAR(300))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_FIND_PERIOD (
    OPERDATE TIMESTAMP)
RETURNS (
    PERIOD_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_FIND_PERMISSIBLEACCOUNTS (
    ACCDB INTEGER,
    ANLDB1 INTEGER,
    ANLDB2 INTEGER,
    ANLDB3 INTEGER,
    ANLDB4 INTEGER,
    ANLDB5 INTEGER,
    ACCKT INTEGER,
    ANLKT1 INTEGER,
    ANLKT2 INTEGER,
    ANLKT3 INTEGER,
    ANLKT4 INTEGER,
    ANLKT5 INTEGER)
RETURNS (
    RESULT INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_FIND_PREV_PERIOD (
    OPERDATE TIMESTAMP)
RETURNS (
    PERIOD_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_FOLD_IS_BRANCH_MEMBER (
    FOLDER_ID INTEGER,
    BRANCHHEAD_ID INTEGER,
    AFOLDERTYPE SMALLINT)
RETURNS (
    RESULT SMALLINT)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_ACC_LIST (
    ACC1 INTEGER,
    ACC2 INTEGER,
    ACC3 INTEGER,
    ACC4 INTEGER,
    ACC5 INTEGER)
RETURNS (
    ACC INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_ACC_PARAMS (
    ACC INTEGER,
    TYPE_PARAMS VARCHAR(20))
RETURNS (
    RESULT VARCHAR(80))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_ACC_SUB_LIST (
    ACC1 VARCHAR(20),
    ACC2 VARCHAR(20),
    ACC3 VARCHAR(20),
    ACC4 VARCHAR(20),
    ACC5 VARCHAR(20))
RETURNS (
    UPACC CHAR(20))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_ACCANALITICFORM (
    ACC CHAR(20))
RETURNS (
    RESULT SMALLINT)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_ACCBATCH_ACCBATCHHIST (
    OPERDATE TIMESTAMP,
    ACC INTEGER,
    ANL1 INTEGER,
    ANL2 INTEGER,
    ANL3 INTEGER,
    ANL4 INTEGER,
    ANL5 INTEGER,
    ACCOUNTBATCH_ID INTEGER,
    CAT_ID INTEGER,
    CONTR INTEGER,
    QUAN NUMERIC(15,3))
RETURNS (
    ACCBATCH_ID INTEGER,
    ACCBATCHHIST_ID INTEGER,
    QUANTITY NUMERIC(15,3),
    SUMMANAT NUMERIC(15,4),
    SUMMACUR NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_ACCTYPE (
    ACC CHAR(20))
RETURNS (
    RESULT SMALLINT)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_AMORTRATE (
    AMCODE_ID INTEGER,
    AMONTH INTEGER)
RETURNS (
    RATE DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_ANLPLAN_PARAMS (
    ANLPLAN_ID INTEGER,
    TYPE_PARAMS VARCHAR(20))
RETURNS (
    RESULT VARCHAR(80))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_CATALOG_PARAMS (
    CATALOG_ID INTEGER,
    TYPE_PARAMS VARCHAR(20))
RETURNS (
    RESULT VARCHAR(80))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_CATALOG_PRICE (
    CATALOG_ID INTEGER,
    OPERDATE DATE,
    CURCODE_IN VARCHAR(5))
RETURNS (
    CURCODE_OUT VARCHAR(5),
    COSTNAT NUMERIC(15,4),
    COSTCUR NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_CATALOG_TAXRATE (
    TAXFORM SMALLINT,
    CATALOG_ID INTEGER)
RETURNS (
    RESULT NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_CONTRACTOR_PARAMS (
    CONTRACTOR INTEGER,
    TYPE_PARAMS VARCHAR(20))
RETURNS (
    RESULT VARCHAR(80))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_CURRCOURCE_TO_CURRCOURCE (
    CURR_CODE_FROM VARCHAR(5),
    TYPE_COURCE_FROM SMALLINT,
    CURR_CODE_TO VARCHAR(5),
    TYPE_COURCE_TO SMALLINT,
    DATE_CONV DATE)
RETURNS (
    RESULT NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_CURRENCYCOURCE (
    CURRENCYCODE CHAR(5),
    RATE_DATE TIMESTAMP,
    RATE_TYPE INTEGER,
    RATE_AUTHORITY INTEGER)
RETURNS (
    RESULT NUMERIC(15,5))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_CURRENCYCOURCEAVG (
    CURRENCYCODE CHAR(5),
    COURCEBEGINDATE TIMESTAMP,
    COURCEENDDATE TIMESTAMP,
    COURTYPE SMALLINT)
RETURNS (
    RESULT NUMERIC(15,5))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_DOCSUM (
    DOCTYPE CHAR(15),
    DOCNUMBER CHAR(20),
    DOCDATE TIMESTAMP)
RETURNS (
    SUMNAT NUMERIC(15,4),
    SUMCUR NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_DOCSUM_WITHOUT_DISCOUNT (
    SECTIONDOC SMALLINT,
    DOCUMENT_ID INTEGER)
RETURNS (
    RESULT NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_DOCUMENT_SUMMA (
    SECTIONDOC SMALLINT,
    DOCUMENT_ID INTEGER)
RETURNS (
    RESULT NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_DOCUMENT_SUMNDS (
    SECTIONDOC SMALLINT,
    DOCUMENT_ID INTEGER,
    NUM INTEGER)
RETURNS (
    RESULT NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_DOCUMENTMODEL (
    SECTIONDOC SMALLINT,
    DOCUMENTMODEL_ID INTEGER)
RETURNS (
    MODELNAME VARCHAR(80),
    FOLDER_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_EMPLOYEE_BY_ORGUNIT (
    ORGUNIT_ID INTEGER)
RETURNS (
    EMPL_ID INTEGER,
    EMPL_CODE CHAR(20))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_IN_COST_CATALOG_ID (
    CATALOG_ID INTEGER,
    FEATURE_ID INTEGER)
RETURNS (
    RESULT NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_IN_COST_CATALOGID (
    CATALOGID INTEGER,
    FEATURE_ID INTEGER)
RETURNS (
    CENA_IN NUMERIC(15,4),
    CURR_CODE CHAR(5))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_IN_COST_CATALOGID_RUB (
    CATALOGID INTEGER,
    FEATURE_ID INTEGER,
    DATE2 TIMESTAMP)
RETURNS (
    CENA_IN NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_LAST_CATALOGPRICE (
    CAT_ID INTEGER)
RETURNS (
    PRICE NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_LAST_CATALOGPRICEDATE (
    CAT_ID INTEGER)
RETURNS (
    IN_ACTION_DATE TIMESTAMP)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_LAST_DOC_NUMBER (
    DOCTYPE CHAR(15),
    DOCSECTION SMALLINT,
    DOCDATE TIMESTAMP)
RETURNS (
    DOCNUMBER VARCHAR(20))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_NALOG_FROM_DOCUMENT (
    DOC_ID INTEGER)
RETURNS (
    STR VARCHAR(120),
    NAME_0 VARCHAR(20),
    NAME_1 VARCHAR(20),
    NAME_2 VARCHAR(20),
    NAME_3 VARCHAR(20),
    SUM_0 NUMERIC(15,4),
    SUM_1 NUMERIC(15,4),
    SUM_2 NUMERIC(15,4),
    SUM_3 NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_NUM_MONTHS (
    INVENTORY_ID INTEGER,
    AMONTH INTEGER,
    INDATE TIMESTAMP,
    OUTDATE TIMESTAMP)
RETURNS (
    MONTHS INTEGER,
    NUMMONTHS INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_OBDB (
    ACCDB VARCHAR(255),
    ACCKT CHAR(20),
    DATE1 DATE,
    DATE2 DATE,
    SPECMARK CHAR(20))
RETURNS (
    RESULT NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_OBDB_DETAIL (
    ACC_DB INTEGER,
    ANL_DB1 INTEGER,
    ANL_DB2 INTEGER,
    ANL_DB3 INTEGER,
    ANL_DB4 INTEGER,
    ANL_DB5 INTEGER,
    ACC_KT INTEGER,
    ANL_KT1 INTEGER,
    ANL_KT2 INTEGER,
    ANL_KT3 INTEGER,
    ANL_KT4 INTEGER,
    ANL_KT5 INTEGER,
    CONTR_ID INTEGER,
    CATALOG_ID INTEGER,
    DATE1 TIMESTAMP,
    DATE2 TIMESTAMP)
RETURNS (
    RESULT NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_OBKT (
    ACCKT VARCHAR(255),
    ACCDB CHAR(20),
    DATE1 DATE,
    DATE2 DATE,
    SPECMARK CHAR(20))
RETURNS (
    RESULT NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_OBKT_DETAIL (
    ACC_KT INTEGER,
    ANL_KT1 INTEGER,
    ANL_KT2 INTEGER,
    ANL_KT3 INTEGER,
    ANL_KT4 INTEGER,
    ANL_KT5 INTEGER,
    ACC_DB INTEGER,
    ANL_DB1 INTEGER,
    ANL_DB2 INTEGER,
    ANL_DB3 INTEGER,
    ANL_DB4 INTEGER,
    ANL_DB5 INTEGER,
    CONTR_ID INTEGER,
    CATALOG_ID INTEGER,
    DATE1 TIMESTAMP,
    DATE2 TIMESTAMP)
RETURNS (
    RESULT NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_OSDB (
    ACC VARCHAR(255),
    ADATE DATE,
    ONBEGINDAY SMALLINT)
RETURNS (
    RESULT NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_OSDB_DETAIL (
    ACC INTEGER,
    ANL1 INTEGER,
    ANL2 INTEGER,
    ANL3 INTEGER,
    ANL4 INTEGER,
    ANL5 INTEGER,
    CONTR_ID INTEGER,
    CATALOG_ID INTEGER,
    ADATE TIMESTAMP,
    ONBEGINDAY SMALLINT)
RETURNS (
    RESULT NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_OSKT (
    ACC VARCHAR(255),
    ADATE DATE,
    ONBEGINDAY SMALLINT)
RETURNS (
    RESULT NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_OSKT_DETAIL (
    ACC INTEGER,
    ANL1 INTEGER,
    ANL2 INTEGER,
    ANL3 INTEGER,
    ANL4 INTEGER,
    ANL5 INTEGER,
    CONTR_ID INTEGER,
    CATALOG_ID INTEGER,
    ADATE TIMESTAMP,
    ONBEGINDAY SMALLINT)
RETURNS (
    RESULT NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_OUT_COST_STOCKCARD_CURR (
    STOCK_CODE VARCHAR(20),
    MOL_CODE VARCHAR(20),
    CATALOG_ID INTEGER)
RETURNS (
    PRICE NUMERIC(15,2),
    CURRENCY_CODE VARCHAR(5))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_OUT_COST_STOCKCARD_PRICE (
    STOCK_CODE VARCHAR(20),
    MOL_CODE VARCHAR(20),
    PRICELISTSPEC_ID INTEGER)
RETURNS (
    RESULT NUMERIC(15,8))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_PRICE_PRICETYPE (
    PRICE_TYPE_CODE VARCHAR(20),
    PRICELISTSPEC_ID INTEGER)
RETURNS (
    RESULT NUMERIC(15,2))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_PRODUCTVOLUME (
    AMCODE_ID INTEGER,
    AMONTH INTEGER)
RETURNS (
    VOL DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_SPECIFICATION_QUAN (
    SECTIONDOC SMALLINT,
    SPECIFICATION_ID INTEGER)
RETURNS (
    RESULT DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_SPECIFICATION_SUMM (
    SECTIONDOC SMALLINT,
    SPECIFICATION_ID INTEGER)
RETURNS (
    RESULT DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_SPECSUM_WITHOUT_DISCOUNT (
    SECTIONDOC SMALLINT,
    SPECIFICATION_ID INTEGER)
RETURNS (
    RESULT NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_TAX_SUMM (
    SECTIONDOC SMALLINT,
    SPECIFICATION_ID INTEGER,
    TAX_CODE CHAR(20))
RETURNS (
    RESULT DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_TAXES_SUM_FOR_BANKDOC (
    SECTIONSRC SMALLINT,
    SRC_ID INTEGER,
    DIRECTRATE NUMERIC(15,5))
RETURNS (
    DOC_SUM NUMERIC(15,4),
    TAX_SUM NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_WAREHOUSE_PLAN_IN (
    WARECARD_ID INTEGER)
RETURNS (
    SYSDATETIME TIMESTAMP,
    PROCESSDATE TIMESTAMP,
    FROM_CODE CHAR(20),
    TO_CODE CHAR(20),
    QUANTITY NUMERIC(15,3),
    QUANTITY2 NUMERIC(15,3),
    DOCTYPE CHAR(15),
    DOCNUMBER CHAR(20),
    DOCDATE TIMESTAMP,
    DOCUMENT_ID INTEGER,
    DOCSECTION INTEGER,
    BASEDOCTYPE CHAR(15),
    BASEDOCNUMBER CHAR(20),
    BASEDOCDATE TIMESTAMP)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_GET_WAREHOUSE_PLAN_OUT (
    WARECARD_ID INTEGER)
RETURNS (
    SYSDATETIME TIMESTAMP,
    PROCESSDATE TIMESTAMP,
    FROM_CODE CHAR(20),
    TO_CODE CHAR(20),
    QUANTITY NUMERIC(15,3),
    QUANTITY2 NUMERIC(15,3),
    DOCTYPE CHAR(15),
    DOCNUMBER CHAR(20),
    DOCDATE TIMESTAMP,
    DOCUMENT_ID INTEGER,
    DOCSECTION INTEGER,
    BASEDOCTYPE CHAR(15),
    BASEDOCNUMBER CHAR(20),
    BASEDOCDATE TIMESTAMP)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_INC_DATE (
    ADATE TIMESTAMP,
    ADAY INTEGER,
    AMONTH INTEGER,
    AYEAR INTEGER)
RETURNS (
    RESULT TIMESTAMP)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_NESTED_CATFOLDERS (
    HEAD_ID INTEGER)
RETURNS (
    FOLDER_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_NESTED_CATFOLDERS_ALL_RECURSE (
    HEAD_ID INTEGER)
RETURNS (
    FOLDER_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_NESTED_FOLDERS (
    HEAD_ID INTEGER,
    FOLDERTYPE SMALLINT)
RETURNS (
    FOLDER_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_NESTED_ORGUNITS (
    HEAD_ID INTEGER)
RETURNS (
    FOLDER_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_ORGUNIT_IS_BRANCH_MEMBER (
    FOLDER_ID INTEGER,
    BRANCHHEAD_ID INTEGER)
RETURNS (
    RESULT SMALLINT)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_OUTCOME_FROM_STOCK (
    ADATE TIMESTAMP,
    STOCK_ID INTEGER,
    STOCKCARD_ID INTEGER,
    STOCKBATCH_ID INTEGER,
    DOC_ID INTEGER,
    DOCSPEC_ID INTEGER,
    QUANTITY NUMERIC(18,6),
    QUANTITY2 NUMERIC(18,6),
    PREV_SBH_ID INTEGER,
    OWNER_ID INTEGER,
    STOCK_KIND_ID INTEGER)
RETURNS (
    STOCKBATCHHIST_ID INTEGER,
    END_QUAN NUMERIC(18,6))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_OVERESTIMATION_AP (
    ADATE TIMESTAMP,
    ACC INTEGER,
    ACCPROFIT INTEGER,
    ANLPR1_ID INTEGER,
    ANLPR2_ID INTEGER,
    ANLPR3_ID INTEGER,
    ANLPR4_ID INTEGER,
    ANLPR5_ID INTEGER,
    ACCLOSS INTEGER,
    ANLLOSS1_ID INTEGER,
    ANLLOSS2_ID INTEGER,
    ANLLOSS3_ID INTEGER,
    ANLLOSS4_ID INTEGER,
    ANLLOSS5_ID INTEGER,
    FOLDER_ID INTEGER,
    CURRATE_TYPE INTEGER,
    CURRATE_AUTHORITY INTEGER)
RETURNS (
    ECONOMICOPER_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_QUAN_ON_STOCK (
    STOCK CHAR(20),
    MOL CHAR(20),
    CATALOG_ID INTEGER,
    USER_ID INTEGER)
RETURNS (
    FACT NUMERIC(15,3),
    PLAN_IN NUMERIC(15,3),
    PLAN_OUT NUMERIC(15,3),
    RESERVE NUMERIC(15,3),
    AVAILABLE NUMERIC(15,3),
    FACT2 NUMERIC(15,3),
    PLAN_IN2 NUMERIC(15,3),
    PLAN_OUT2 NUMERIC(15,3),
    RESERVE2 NUMERIC(15,3),
    AVAILABLE2 NUMERIC(15,3))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_REGISTERFACTURA_IN_BUYBOOK (
    DOC_ID INTEGER,
    SPEC_ID INTEGER,
    FOLDER_ID INTEGER,
    ADATE TIMESTAMP,
    ASUM NUMERIC(18,4),
    BOOK_ID INTEGER)
RETURNS (
    BUYBOOK_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_REGISTERFACTURA_IN_SALEBOOK (
    DOC_ID INTEGER,
    SPEC_ID INTEGER,
    FOLDER_ID INTEGER,
    ADATE TIMESTAMP,
    ASUM NUMERIC(18,4),
    BOOK_ID INTEGER)
RETURNS (
    SALEBOOK_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_REVALUE_REMNVAL (
    INCOMEDATE TIMESTAMP,
    ACCBATCH_ID INTEGER,
    ACC INTEGER,
    ANL1 INTEGER,
    ANL2 INTEGER,
    ANL3 INTEGER,
    ANL4 INTEGER,
    ANL5 INTEGER,
    CATALOG_ID INTEGER,
    DOCSECTION SMALLINT,
    DOC_ID INTEGER,
    DOCTYPE VARCHAR(15),
    DOCNUMBER VARCHAR(20),
    DOCDATE TIMESTAMP,
    QUAN NUMERIC(15,3),
    SUMMANAT NUMERIC(15,4),
    SUMMACUR NUMERIC(15,4),
    CONTR INTEGER,
    OLDACCBATCHHISTORY_ID INTEGER)
RETURNS (
    ACCBATCHHISTORY_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_ROLLBACK_ACTIVITY (
    SEGMENT_ID INTEGER)
RETURNS (
    PROCESS_ID INTEGER,
    ACTIVITY_ID INTEGER,
    RESOURCE_ID INTEGER,
    ITERATE SMALLINT)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_TAXES_SUM (
    ALLTAXES SMALLINT,
    TAXFORM SMALLINT,
    INCLUDED SMALLINT,
    CALCTAXESKIND_ID INTEGER,
    SECTIONDOC SMALLINT,
    SPEC_ID INTEGER)
RETURNS (
    RESULT NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_UPDATE_STOCK_PLANNED (
    DIRECTION SMALLINT,
    KIND SMALLINT,
    STOCK_ID INTEGER,
    MOL_ID INTEGER,
    QUANTITY NUMERIC(15,3),
    QUANTITY2 NUMERIC(15,3),
    CATALOG_ID INTEGER,
    DOCHEAD_ID INTEGER,
    DOCSPEC_ID INTEGER,
    PROCESSDATE TIMESTAMP)
RETURNS (
    HISTORY_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_UPDATE_STOCK_RESERVE (
    DIRECTION SMALLINT,
    STOCK_ID INTEGER,
    MOL_ID INTEGER,
    QUANTITY NUMERIC(15,3),
    QUANTITY2 NUMERIC(15,3),
    CATALOG_ID INTEGER,
    DOCHEAD_ID INTEGER,
    DOCSPEC_ID INTEGER,
    PROCESSDATE TIMESTAMP)
RETURNS (
    HISTORY_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_VALQUANT_ONDATE (
    CATID INTEGER,
    ADATE TIMESTAMP,
    ACC INTEGER,
    ANL1 INTEGER,
    ANL2 INTEGER,
    ANL3 INTEGER,
    ANL4 INTEGER,
    ANL5 INTEGER,
    CONTR INTEGER)
RETURNS (
    QUANT NUMERIC(15,3))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE F_VALSUM_ONDATE (
    CATID INTEGER,
    ADATE TIMESTAMP,
    ACC INTEGER,
    ANL1 INTEGER,
    ANL2 INTEGER,
    ANL3 INTEGER,
    ANL4 INTEGER,
    ANL5 INTEGER,
    CONTR INTEGER)
RETURNS (
    SUMMA NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE FIN_CARRY_FORWARD_BALANCE (
    PERIOD_ID INTEGER,
    ACCOUNT_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE FIN_CLEAR_TURN (
    PERIOD1 INTEGER,
    PERIOD2 INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE FIN_FIND_OPENED_PERIOD (
    OPERDATE TIMESTAMP)
RETURNS (
    PERIOD_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE FIN_FIND_PERIOD (
    OPERDATE TIMESTAMP)
RETURNS (
    PERIOD_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE FIN_INCL_SPEC_IN_TURNACC (
    PERIOD_ID INTEGER,
    ACC_ID INTEGER,
    ANL1 INTEGER,
    ANL2 INTEGER,
    ANL3 INTEGER,
    ANL4 INTEGER,
    ANL5 INTEGER,
    INCOMECUR NUMERIC(15,4),
    INCOMENAT NUMERIC(15,4),
    OUTCOMECUR NUMERIC(15,4),
    OUTCOMENAT NUMERIC(15,4),
    USER_ID INTEGER,
    CURCODE CHAR(5))
RETURNS (
    TURN_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE FIN_INCL_SPEC_IN_TURNFEAT (
    PERIOD_ID INTEGER,
    FINTURNACC_ID INTEGER,
    FEAT_ID INTEGER,
    FANL1 INTEGER,
    FANL2 INTEGER,
    FANL3 INTEGER,
    FANL4 INTEGER,
    FANL5 INTEGER,
    INCOMECUR NUMERIC(15,4),
    INCOMENAT NUMERIC(15,4),
    OUTCOMECUR NUMERIC(15,4),
    OUTCOMENAT NUMERIC(15,4),
    CURCODE CHAR(5))
RETURNS (
    TURN_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE FIN_TURNACC_LOAD (
    ID INTEGER)
RETURNS (
    PERIOD_ID INTEGER,
    PNAME CHAR(20),
    CURCODE CHAR(5),
    ACC_ID INTEGER,
    ACC_CODE CHAR(20),
    ACCFOLDER_ID INTEGER,
    ANL1_ID INTEGER,
    ANL2_ID INTEGER,
    ANL3_ID INTEGER,
    ANL4_ID INTEGER,
    ANL5_ID INTEGER,
    ANL1_CODE CHAR(20),
    ANL2_CODE CHAR(20),
    ANL3_CODE CHAR(20),
    ANL4_CODE CHAR(20),
    ANL5_CODE CHAR(20),
    REMNBEGNAT NUMERIC(15,4),
    REMNBEGCUR NUMERIC(15,4),
    INCOMENAT NUMERIC(15,4),
    INCOMECUR NUMERIC(15,4),
    OUTCOMENAT NUMERIC(15,4),
    OUTCOMECUR NUMERIC(15,4),
    REMNENDNAT NUMERIC(15,4),
    REMNENDCUR NUMERIC(15,4),
    REMNBEGNATPLAN NUMERIC(15,4),
    REMNBEGCURPLAN NUMERIC(15,4),
    INCOMENATPLAN NUMERIC(15,4),
    INCOMECURPLAN NUMERIC(15,4),
    OUTCOMENATPLAN NUMERIC(15,4),
    OUTCOMECURPLAN NUMERIC(15,4),
    REMNENDNATPLAN NUMERIC(15,4),
    REMNENDCURPLAN NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE FIN_TURNACC_SELECT (
    PERIOD1 INTEGER,
    PERIOD2 INTEGER,
    ACCOUNT_FOLDER INTEGER,
    ACCOUNT INTEGER,
    INCL_FACT INTEGER,
    INCL_PLAN INTEGER,
    INCL_DIFF INTEGER)
RETURNS (
    ID INTEGER,
    PERIOD_ID INTEGER,
    PNAME CHAR(20),
    DATEFROM TIMESTAMP,
    DATETO TIMESTAMP,
    ACC_ID INTEGER,
    ACC_CODE CHAR(20),
    ACCFOLDER_ID INTEGER,
    ANL1_ID INTEGER,
    ANL2_ID INTEGER,
    ANL3_ID INTEGER,
    ANL4_ID INTEGER,
    ANL5_ID INTEGER,
    ANL1_CODE CHAR(20),
    ANL2_CODE CHAR(20),
    ANL3_CODE CHAR(20),
    ANL4_CODE CHAR(20),
    ANL5_CODE CHAR(20),
    REMNBEGNAT NUMERIC(15,4),
    REMNBEGCUR NUMERIC(15,4),
    INCOMENAT NUMERIC(15,4),
    INCOMECUR NUMERIC(15,4),
    OUTCOMENAT NUMERIC(15,4),
    OUTCOMECUR NUMERIC(15,4),
    REMNENDNAT NUMERIC(15,4),
    REMNENDCUR NUMERIC(15,4),
    KIND INTEGER,
    GROUPNUM INTEGER,
    CURCODE CHAR(5))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE FIN_TURNFEAT_LOAD (
    ID INTEGER)
RETURNS (
    PERIOD_ID INTEGER,
    PNAME CHAR(20),
    CURCODE CHAR(5),
    ACC_ID INTEGER,
    ACC_CODE CHAR(20),
    ANL1_ID INTEGER,
    ANL2_ID INTEGER,
    ANL3_ID INTEGER,
    ANL4_ID INTEGER,
    ANL5_ID INTEGER,
    ANL1_CODE CHAR(20),
    ANL2_CODE CHAR(20),
    ANL3_CODE CHAR(20),
    ANL4_CODE CHAR(20),
    ANL5_CODE CHAR(20),
    FEAT_ID INTEGER,
    FEAT_CODE CHAR(20),
    FEATFOLDER_ID INTEGER,
    FANL1_ID INTEGER,
    FANL2_ID INTEGER,
    FANL3_ID INTEGER,
    FANL4_ID INTEGER,
    FANL5_ID INTEGER,
    FANL1_CODE CHAR(20),
    FANL2_CODE CHAR(20),
    FANL3_CODE CHAR(20),
    FANL4_CODE CHAR(20),
    FANL5_CODE CHAR(20),
    REMNBEGNAT NUMERIC(15,4),
    REMNBEGCUR NUMERIC(15,4),
    INCOMENAT NUMERIC(15,4),
    INCOMECUR NUMERIC(15,4),
    OUTCOMENAT NUMERIC(15,4),
    OUTCOMECUR NUMERIC(15,4),
    REMNENDNAT NUMERIC(15,4),
    REMNENDCUR NUMERIC(15,4),
    REMNBEGNATPLAN NUMERIC(15,4),
    REMNBEGCURPLAN NUMERIC(15,4),
    INCOMENATPLAN NUMERIC(15,4),
    INCOMECURPLAN NUMERIC(15,4),
    OUTCOMENATPLAN NUMERIC(15,4),
    OUTCOMECURPLAN NUMERIC(15,4),
    REMNENDNATPLAN NUMERIC(15,4),
    REMNENDCURPLAN NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE FIN_TURNFEAT_SELECT (
    PERIOD1 INTEGER,
    PERIOD2 INTEGER,
    ACCOUNT_ID INTEGER,
    FEATURE_ID INTEGER,
    FEATURE_FOLDER_ID INTEGER,
    INCL_FACT INTEGER,
    INCL_PLAN INTEGER,
    INCL_DIFF INTEGER)
RETURNS (
    ID INTEGER,
    PERIOD_ID INTEGER,
    PNAME CHAR(20),
    DATEFROM TIMESTAMP,
    DATETO TIMESTAMP,
    ACC_ID INTEGER,
    ACC_CODE CHAR(20),
    ANL1_ID INTEGER,
    ANL2_ID INTEGER,
    ANL3_ID INTEGER,
    ANL4_ID INTEGER,
    ANL5_ID INTEGER,
    ANL1_CODE CHAR(20),
    ANL2_CODE CHAR(20),
    ANL3_CODE CHAR(20),
    ANL4_CODE CHAR(20),
    ANL5_CODE CHAR(20),
    FEAT_ID INTEGER,
    FEAT_CODE CHAR(20),
    FEATFOLDER_ID INTEGER,
    FANL1_ID INTEGER,
    FANL2_ID INTEGER,
    FANL3_ID INTEGER,
    FANL4_ID INTEGER,
    FANL5_ID INTEGER,
    FANL1_CODE CHAR(20),
    FANL2_CODE CHAR(20),
    FANL3_CODE CHAR(20),
    FANL4_CODE CHAR(20),
    FANL5_CODE CHAR(20),
    REMNBEGNAT NUMERIC(15,4),
    REMNBEGCUR NUMERIC(15,4),
    INCOMENAT NUMERIC(15,4),
    INCOMECUR NUMERIC(15,4),
    OUTCOMENAT NUMERIC(15,4),
    OUTCOMECUR NUMERIC(15,4),
    REMNENDNAT NUMERIC(15,4),
    REMNENDCUR NUMERIC(15,4),
    KIND INTEGER,
    GROUPNUM INTEGER,
    CURCODE CHAR(5))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE FIN_UPDATE_TURN (
    FINOPER_ID INTEGER,
    PERIOD_ID INTEGER,
    USER_ID INTEGER,
    CURCODE CHAR(5))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE FUEL_COPYDETAIL_DENSITY (
    SRCHEAD_ID INTEGER,
    DSTHEAD_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE GET_DATE (
    ADATE TIMESTAMP)
RETURNS (
    RDATE TIMESTAMP)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE GET_DOUBLE (
    ADOUBLE DOUBLE PRECISION)
RETURNS (
    RDOUBLE DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ITDBEGIN
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE ITDEND
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE MF_P_COPY_BOM_TO_JOB (
    BOM_ID INTEGER,
    JOB_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE MF_P_COPYDETAIL_BOM (
    SRCBOM_ID INTEGER,
    DSTBOM_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE OBDB (
    ACCDB VARCHAR(255),
    ACCKT CHAR(20),
    DATE1 TIMESTAMP,
    DATE2 TIMESTAMP,
    SPECMARK CHAR(20))
RETURNS (
    TURN NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE OBDB_DETAIL (
    ACC_DB INTEGER,
    ANL_DB1 INTEGER,
    ANL_DB2 INTEGER,
    ANL_DB3 INTEGER,
    ANL_DB4 INTEGER,
    ANL_DB5 INTEGER,
    ACC_KT INTEGER,
    ANL_KT1 INTEGER,
    ANL_KT2 INTEGER,
    ANL_KT3 INTEGER,
    ANL_KT4 INTEGER,
    ANL_KT5 INTEGER,
    CONTR_ID INTEGER,
    CATALOG_ID INTEGER,
    DATE1 TIMESTAMP,
    DATE2 TIMESTAMP)
RETURNS (
    TURNNATDB NUMERIC(15,4),
    TURNCURDB NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE OBKT (
    ACCKT VARCHAR(255),
    ACCDB CHAR(20),
    DATE1 TIMESTAMP,
    DATE2 TIMESTAMP,
    SPECMARK CHAR(20))
RETURNS (
    TURN NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE OBKT_DETAIL (
    ACC_KT INTEGER,
    ANL_KT1 INTEGER,
    ANL_KT2 INTEGER,
    ANL_KT3 INTEGER,
    ANL_KT4 INTEGER,
    ANL_KT5 INTEGER,
    ACC_DB INTEGER,
    ANL_DB1 INTEGER,
    ANL_DB2 INTEGER,
    ANL_DB3 INTEGER,
    ANL_DB4 INTEGER,
    ANL_DB5 INTEGER,
    CONTR_ID INTEGER,
    CATALOG_ID INTEGER,
    DATE1 TIMESTAMP,
    DATE2 TIMESTAMP)
RETURNS (
    TURNNATKT NUMERIC(15,4),
    TURNCURKT NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE OSDB (
    ACC VARCHAR(255),
    ADATE TIMESTAMP,
    ONBEGINDAY SMALLINT)
RETURNS (
    REMN NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE OSDB_DETAIL (
    ACC INTEGER,
    ANL1 INTEGER,
    ANL2 INTEGER,
    ANL3 INTEGER,
    ANL4 INTEGER,
    ANL5 INTEGER,
    CONTR_ID INTEGER,
    CATALOG_ID INTEGER,
    ADATE TIMESTAMP,
    ONBEGINDAY SMALLINT)
RETURNS (
    REMNNATDB NUMERIC(15,4),
    REMNCURDB NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE OSKT (
    ACC VARCHAR(255),
    ADATE TIMESTAMP,
    ONBEGINDAY SMALLINT)
RETURNS (
    REMN NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE OSKT_DETAIL (
    ACC INTEGER,
    ANL1 INTEGER,
    ANL2 INTEGER,
    ANL3 INTEGER,
    ANL4 INTEGER,
    ANL5 INTEGER,
    CONTR_ID INTEGER,
    CATALOG_ID INTEGER,
    ADATE TIMESTAMP,
    ONBEGINDAY SMALLINT)
RETURNS (
    REMNNATKT NUMERIC(15,4),
    REMNCURKT NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE OVR_CALC_GIVEN_OUT (
    OVR_CARD_ID INTEGER,
    OVR_NORM_SPEC_ID INTEGER)
RETURNS (
    RESULT NUMERIC(15,3))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE OVR_CALC_PERCENT (
    ADATE TIMESTAMP,
    ASHELFLIFE INTEGER,
    ASHELFLIFE_MEAS INTEGER)
RETURNS (
    "PERCENT" SMALLINT)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE OVR_GET_LAST_HIST_STATUS (
    CARD_HIST_ID INTEGER)
RETURNS (
    RESULT INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE OVR_P_COPYDETAIL_NORM_HEAD (
    SRCHEAD_ID INTEGER,
    DSTHEAD_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE OVR_WRITEOFF_DETERIORATED (
    WRITEOFF_DATE TIMESTAMP)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_ADD_PRICELISTSPEC_FROM_CAT (
    PRICELISTFOLDER_ID INTEGER,
    CATALOGFOLDER_ID INTEGER,
    ISPRICELISTSPEC SMALLINT)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_ADD_TAXES (
    SECTIONDOC SMALLINT,
    SPEC_ID INTEGER,
    TAXGROUP_ID INTEGER,
    CALCTAXESKIND_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_ADDWITHMODEL_BANKDOCUMENT (
    AMODEL_ID INTEGER,
    ADOCUMENTHEAD_ID INTEGER,
    MODEL_CLASS_ID INTEGER,
    DOC_CLASS_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_ADDWITHMODEL_BILL (
    AMODEL_ID INTEGER,
    ADOCUMENTHEAD_ID INTEGER,
    MODEL_CLASS_ID INTEGER,
    DOC_CLASS_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_ADDWITHMODEL_CASHDOCUMENT (
    AMODEL_ID INTEGER,
    ADOCUMENTHEAD_ID INTEGER,
    MODEL_CLASS_ID INTEGER,
    DOC_CLASS_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_ADDWITHMODEL_ECONOMICOPER (
    AMODEL_ID INTEGER,
    AECONOMICOPER_ID INTEGER,
    MODEL_CLASS_ID INTEGER,
    DOC_CLASS_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_ADDWITHMODEL_FACTURA (
    AMODEL_ID INTEGER,
    ADOCUMENTHEAD_ID INTEGER,
    MODEL_CLASS_ID INTEGER,
    DOC_CLASS_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_ADDWITHMODEL_FINOPER (
    AMODEL_ID INTEGER,
    AFINOPER_ID INTEGER,
    MODEL_CLASS_ID INTEGER,
    DOC_CLASS_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_ADDWITHMODEL_INTERNALACT (
    AMODEL_ID INTEGER,
    ADOCUMENTHEAD_ID INTEGER,
    MODEL_CLASS_ID INTEGER,
    DOC_CLASS_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_ADDWITHMODEL_INTERNALINVOICE (
    AMODEL_ID INTEGER,
    ADOCUMENTHEAD_ID INTEGER,
    MODEL_CLASS_ID INTEGER,
    DOC_CLASS_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_ADDWITHMODEL_INVOICE (
    AMODEL_ID INTEGER,
    ADOCUMENTHEAD_ID INTEGER,
    MODEL_CLASS_ID INTEGER,
    DOC_CLASS_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_ADDWITHMODEL_ORDER (
    AMODEL_ID INTEGER,
    ADOCUMENTHEAD_ID INTEGER,
    MODEL_CLASS_ID INTEGER,
    DOC_CLASS_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_ADDWITHMODEL_STOCKDOCUMENT (
    AMODEL_ID INTEGER,
    ADOCUMENTHEAD_ID INTEGER,
    MODEL_CLASS_ID INTEGER,
    DOC_CLASS_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_APPLY_DISCOUNT (
    DOC_ID INTEGER,
    DISCOUNT NUMERIC(15,5))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_AUTODISTRIBUTION_FACTSUM (
    FACT_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_BROWSE_STOCKBATCH (
    STOCK_ID INTEGER,
    MOL_ID INTEGER,
    CATALOG_ID INTEGER,
    PROCESS_DATE TIMESTAMP)
RETURNS (
    ID INTEGER,
    CONTRACTOR CHAR(20),
    BEGINQUAN NUMERIC(15,3),
    ENDQUAN NUMERIC(15,3),
    BEGINQUAN2 NUMERIC(15,3),
    ENDQUAN2 NUMERIC(15,3),
    PRICENAT NUMERIC(15,4),
    PRICECUR NUMERIC(15,4),
    CURRENCY_CODE CHAR(5),
    DOCCAPTION VARCHAR(100),
    CREATEDATE TIMESTAMP,
    BESTBEFORE TIMESTAMP,
    MEASURE1 CHAR(5),
    MEASURE2 CHAR(5))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_CALC_AMORT (
    INVENTORY_ID INTEGER,
    AMONTH INTEGER,
    BATCH INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_CALC_AMORT_DEPRVAL (
    INVENTORY_ID INTEGER,
    AMONTH INTEGER,
    BATCH INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_CALC_AMORT_LINEAR (
    INVENTORY_ID INTEGER,
    AMONTH INTEGER,
    BATCH INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_CALC_AMORT_PERIOD (
    INVENTORY_ID INTEGER,
    AMONTH INTEGER,
    BATCH INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_CALC_AMORT_PRODUCTION (
    INVENTORY_ID INTEGER,
    AMONTH INTEGER,
    BATCH INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_CALC_BILLHEAD_ACCEPTSUM (
    DOC_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_CALC_PRICE_IN_PRICELISTSPEC (
    BASEPRICE NUMERIC(15,4),
    SPEC_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_CALCULATE_DOCSUM (
    DOCSECTION INTEGER,
    DOCUMENT_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_CHANGE_ACC_ACCTYPE (
    ACC VARCHAR(20),
    PERIOD_FROM INTEGER,
    PERIOD_TO INTEGER,
    ACCTYPE_TO INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_CHANGE_DBKT_POLICY (
    ACC VARCHAR(20),
    PERIOD_FROM INTEGER,
    PERIOD_TO INTEGER,
    POLICY_TO INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_CHANGE_MEAS_ON_CATALOG (
    MEAS_IN VARCHAR(5),
    MEAS_OUT VARCHAR(5))
RETURNS (
    CATALOG_ID INTEGER,
    CNAME VARCHAR(80),
    MEAS_PROV CHAR(5))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_CHECK_PERIOD (
    PERIOD_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_CHECK_PERIODS_CROSS (
    DATEFROM TIMESTAMP,
    DATETO TIMESTAMP)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_CHECK_PERMISSIBLEACC (
    ACCDB INTEGER,
    ANLDB1 INTEGER,
    ANLDB2 INTEGER,
    ANLDB3 INTEGER,
    ANLDB4 INTEGER,
    ANLDB5 INTEGER,
    ACCKT INTEGER,
    ANLKT1 INTEGER,
    ANLKT2 INTEGER,
    ANLKT3 INTEGER,
    ANLKT4 INTEGER,
    ANLKT5 INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_COMMIT_AMORT (
    ABATCH INTEGER,
    AFOLDERID INTEGER,
    USER_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_COMPLETE_WF_ACTIVITY (
    ID INTEGER,
    LAST_STATE_TIME TIMESTAMP)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_COPY_PRICELISTFOLDER (
    SRCPRLIST INTEGER,
    DSTPRLIST INTEGER,
    SRCPARENT INTEGER,
    DSTPARENT INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_COPY_RPTBAND (
    SRCRPTID INTEGER,
    DSTRPTID INTEGER,
    SRCPARENTID INTEGER,
    DSTPARENTID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_COPYDETAIL_CALCTAXESKIND (
    SRCHEAD_ID INTEGER,
    DSTHEAD_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_COPYDETAIL_CATALOG (
    SRCHEAD_ID INTEGER,
    DSTHEAD_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_COPYDETAIL_CONTACTHIST (
    SRCHEAD_ID INTEGER,
    DSTHEAD_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_COPYDETAIL_FEATURE (
    SRCHEAD_ID INTEGER,
    DSTHEAD_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_COPYDETAIL_FINOPER (
    SRCHEAD_ID INTEGER,
    DSTHEAD_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_COPYDETAIL_FINOPERMODEL (
    SRCHEAD_ID INTEGER,
    DSTHEAD_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_COPYDETAIL_GROUP (
    SRCHEAD_ID INTEGER,
    DSTHEAD_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_COPYDETAIL_INVHEAD (
    SRCHEAD_ID INTEGER,
    DSTHEAD_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_COPYDETAIL_PARTNER (
    SRCHEAD_ID INTEGER,
    DSTHEAD_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_COPYDETAIL_PRICELIST (
    SRCHEAD_ID INTEGER,
    DSTHEAD_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_COPYDETAIL_PRICELISTSPEC (
    SRCHEAD_ID INTEGER,
    DSTHEAD_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_COPYDETAIL_TAXGROUP (
    SRCHEAD_ID INTEGER,
    DSTHEAD_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_CORRECT_REMNACC (
    ACC VARCHAR(20),
    PERIOD_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_CREATE_PERMISACC_FROM_EO (
    BEGINDATE TIMESTAMP,
    ENDDATE TIMESTAMP)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_CREATE_ROLLBACK_SEGMENT (
    ACTIVITY_ID INTEGER,
    RESOURCE_ID INTEGER,
    ITERATE SMALLINT,
    CREATE_TIME TIMESTAMP)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_DELETE_LINKSTAGE (
    DOCTYPE_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_EVALUATE_OUT_COST (
    REMNVAL_ID INTEGER,
    USER_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_GET_DOCUMENTSPECLIST (
    SECTIONDOC SMALLINT,
    DOCUMENT_ID INTEGER,
    CATID INTEGER,
    ENTRYFOLD INTEGER,
    ENTRYCATTYPE SMALLINT,
    ENTRYTAXGROUP INTEGER)
RETURNS (
    ID INTEGER,
    CATALOG_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_LIST_DOCSPEC_FOR_DOCPROCESS (
    DOCACTION_ID INTEGER,
    DOCUMENT_ID INTEGER)
RETURNS (
    ID INTEGER,
    CATALOG_ID INTEGER,
    CODE CHAR(20),
    CNAME VARCHAR(80),
    PRICE NUMERIC(15,4),
    FREEQUAN NUMERIC(15,3),
    FREEQUAN2 NUMERIC(15,3),
    FREESUMMA NUMERIC(15,4),
    READYQUAN NUMERIC(15,3),
    READYQUAN2 NUMERIC(15,3),
    READYSUMMA NUMERIC(15,4),
    MEASURE_CONTROL SMALLINT,
    MEASURE1_CODE CHAR(5),
    MEASURE2_CODE CHAR(5),
    MEASURE1_ID INTEGER,
    MEASURE2_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_MERGE_DOCHEAD_ADD_EXPENSES (
    SRC_DOCSECTION SMALLINT,
    SRC_ID INTEGER,
    DST_DOCSECTION SMALLINT,
    DST_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_MERGE_DOCHEAD_TD (
    SRC_DOCSECTION SMALLINT,
    SRC_ID INTEGER,
    DST_DOCSECTION SMALLINT,
    DST_ID INTEGER,
    FIRST_CALL SMALLINT)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_MERGE_DOCHEAD_TT (
    SRC_DOCSECTION SMALLINT,
    SRC_ID INTEGER,
    DST_DOCSECTION SMALLINT,
    DST_ID INTEGER,
    FIRST_CALL SMALLINT)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_MERGE_DOCSPEC_ADD (
    SRC_DOCSECTION SMALLINT,
    SRC_SPEC_ID INTEGER,
    DST_DOCSECTION SMALLINT,
    DST_SPEC_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_MERGE_DOCSPEC_UPDATE (
    SRC_DOCSECTION SMALLINT,
    SRC_SPEC_ID INTEGER,
    DST_DOCSECTION SMALLINT,
    DST_SPEC_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_OUT_GOOD_WITH_ACCBATCH (
    ACCBATCH_ID INTEGER,
    ACCBATCHHISTORY_ID INTEGER,
    ESQUAN NUMERIC(15,3))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_OVERESTIMATION_PRICELIST (
    PRICELIST_ID INTEGER,
    "PERCENT" NUMERIC(15,5),
    PRECESION INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_PERIODS_BETWEEN (
    ID1 INTEGER,
    ID2 INTEGER)
RETURNS (
    ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_RESTORE_TAXESSUM_FROM_BUFFER (
    SPEC_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_ROLLBACK_DOCPROCESS (
    FULLROLLBACK SMALLINT,
    DOCACTION_ID INTEGER,
    DOCHEADSTATE_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_RPTBAND_CHANGE_PRIORITY (
    AID INTEGER,
    AINC SMALLINT)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_SAVE_STOCKDOCUMENT_DISCOUNT (
    SPEC_ID INTEGER,
    DOC_DISCOUNT DOUBLE PRECISION,
    LINE_DISCOUNT DOUBLE PRECISION,
    CALCTAXESKIND INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_SAVE_TAXESSUM_IN_BUFFER (
    SPEC_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_SET_SOFTWARE_PRECISION (
    PREC INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_START_WF_PROCESS (
    ID INTEGER,
    LAST_STATE_TIME TIMESTAMP)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_STOCK_ADD_EXPENCES (
    DOCUMENT_ID INTEGER,
    KIND INTEGER)
RETURNS (
    DOCUMENT_SUMM NUMERIC(15,4),
    STOCK_ID INTEGER,
    MOL_ID INTEGER,
    KOEF DOUBLE PRECISION,
    STOCK_SUMM NUMERIC(18,4),
    ENDQUAN NUMERIC(18,4),
    PRICENAT NUMERIC(15,4),
    NEW_PRICENAT NUMERIC(15,4),
    BATCH_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_STOCK_ADD_EXPENCES_CATALOG (
    DOCUMENT_ID INTEGER,
    SPEC_ID INTEGER,
    KIND INTEGER)
RETURNS (
    SPEC_SUMM NUMERIC(15,4),
    STOCK_ID INTEGER,
    MOL_ID INTEGER,
    CATALOG_ID INTEGER,
    KOEF DOUBLE PRECISION,
    STOCK_SUMM NUMERIC(18,4),
    ENDQUAN NUMERIC(18,4),
    PRICENAT NUMERIC(15,4),
    NEW_PRICENAT NUMERIC(15,4),
    BATCH_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_UPDATE_TAXES_SUMM (
    SECTIONDOC SMALLINT,
    SPEC_ID INTEGER,
    CALCTAXESKIND_ID INTEGER,
    PRICE NUMERIC(15,4),
    SUMM NUMERIC(15,4),
    QUANTITY NUMERIC(15,3),
    TOTAL SMALLINT)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE P_UPDATE_TAXES_SUMM_PREC (
    SPEC_ID INTEGER,
    CALCTAXESKIND_ID INTEGER,
    PRICE NUMERIC(15,4),
    SUMM NUMERIC(15,4),
    QUANTITY NUMERIC(15,3),
    TOTAL SMALLINT,
    PREC SMALLINT)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE PREF_SET_BASIC_IDENTDOC (
    PERSONNEL_ID INTEGER,
    DOCUMENT_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE REF_COPY_FEATURELINK (
    SRC_CLASS_ID INTEGER,
    DST_CLASS_ID INTEGER,
    SRC_REC_ID INTEGER,
    DST_REC_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE REF_COPY_FEATURELINK_SAME_CLASS (
    CLASS_ID INTEGER,
    SRC_REC_ID INTEGER,
    DST_REC_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE REF_F_GET_MEASURE_CONV_ALG (
    MEASURE1 INTEGER,
    MEASURE2 INTEGER,
    CATALOG_ID INTEGER)
RETURNS (
    ALGORITHM_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE REF_GET_CATFOLDER_CODE_PATH (
    FOLDER_ID INTEGER,
    ROOT_ID INTEGER)
RETURNS (
    CODE VARCHAR(20),
    ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE REF_GET_FOLDER_PATH (
    KIND SMALLINT,
    FOLDER_TYPE INTEGER,
    FOLDER_ID INTEGER,
    ROOT_ID INTEGER)
RETURNS (
    NAME VARCHAR(80))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE REF_GET_NESTED_FOLDERS (
    KIND SMALLINT,
    HEAD_ID INTEGER,
    FOLDER_TYPE INTEGER)
RETURNS (
    FOLDER_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SEC_CREATE_METHOD (
    BEAN_NAME VARCHAR(128),
    CORBA_NAME VARCHAR(80),
    DESCRIPTION VARCHAR(80))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SEC_CREATE_METHOD_CUR_CLASS (
    CORBA_NAME VARCHAR(80),
    DESCRIPTION VARCHAR(80))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SEC_CREATE_METHOD_FOR_ALL (
    BEAN_NAME VARCHAR(128),
    CORBA_NAME VARCHAR(80),
    DESCRIPTION VARCHAR(80))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SEC_CREATE_METHODS_CUR_CLASS
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SEC_P_CREATE_ADMIN_PERMISS
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SEC_P_CREATE_BEAN_METHOD (
    CLASS_ID INTEGER,
    CORBA_NAME VARCHAR(80),
    DESCRIPTION VARCHAR(80))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SEC_P_CREATE_SYSPART_METHODS (
    SYSPART_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE STL_GET_BASE_DOCS (
    CONTRACTORCARD_ID INTEGER)
RETURNS (
    BASEDOCTYPE CHAR(15),
    BASEDOCNUMBER CHAR(20),
    BASEDOCDATE TIMESTAMP,
    CURRENCY_CODE CHAR(20),
    SUMMANAT NUMERIC(15,4),
    SUMMACUR NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE STL_GET_CONTRACTS (
    CONTRACTORCARD_ID INTEGER)
RETURNS (
    CONTRACTTYPE CHAR(15),
    CONTRACTNUMBER CHAR(20),
    CONTRACTDATE TIMESTAMP,
    CURRENCY_CODE CHAR(20),
    SUMMANAT NUMERIC(15,4),
    SUMMACUR NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SYS_CREATE_CLASS (
    MODULE VARCHAR(80),
    BEAN_NAME VARCHAR(128),
    DESCRIPTION VARCHAR(256))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE WF_SET_ACTIVITY_RESULT (
    PROCESS_ID INTEGER,
    ACTIVITY_ID INTEGER,
    THE_NAME CHAR(20),
    THE_VALUE VARCHAR(100))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE WF_SET_PROCESS_RESULT (
    PROCESS_ID INTEGER,
    THE_NAME CHAR(20),
    THE_VALUE VARCHAR(100))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE WH_ALLOT_ADDEXPENSES (
    DOC_ID INTEGER,
    DS_ID INTEGER,
    EXPEN_SUM NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE WH_F_BROWSE_BATCH_BIN_LOCATION (
    BATCH_ID INTEGER)
RETURNS (
    ID INTEGER,
    CODE CHAR(20),
    QUANTITY NUMERIC(15,3))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE WH_F_CHECK_BIN_LOCATION_SIZE (
    CATALOG_CODE CHAR(20),
    BIN_CODE CHAR(20),
    WAREHOUSE_ID INTEGER,
    QUANTITY NUMERIC(15,3),
    BIN_SIZING SMALLINT)
RETURNS (
    BIN_ID INTEGER,
    STOCK_CODE CHAR(20),
    RESULT SMALLINT)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE WH_F_COPY_SER_NUM_FROM_DOCSPEC (
    DOCSPEC_ID INTEGER,
    STOCKBATCH_ID INTEGER)
RETURNS (
    SERNUM_COUNT INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE WH_F_INCOME_TO_STOCK (
    STOCKBATCH_ID INTEGER,
    CREATEDATE TIMESTAMP,
    DOC_ID INTEGER,
    DOCSPEC_ID INTEGER,
    QUAN NUMERIC(18,6),
    QUAN2 NUMERIC(18,6),
    PREV_SBH INTEGER)
RETURNS (
    STOCKBATCHHIST_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE WH_F_LOAD_BATCH_BIN_LOCATION (
    STOCKBATCHHIST_ID INTEGER)
RETURNS (
    BIN_CODE VARCHAR(20),
    QUAN NUMERIC(15,3),
    BATCH_ID INTEGER,
    PREVHIST_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE WH_F_LOAD_BATCH_SERIAL_NUM (
    STOCKBATCHHIST_ID INTEGER)
RETURNS (
    SERIAL_NUM VARCHAR(50))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE WH_GET_RESERVE (
    WARECARD_ID INTEGER)
RETURNS (
    SYSDATETIME TIMESTAMP,
    PROCESSDATE TIMESTAMP,
    FROM_CODE CHAR(20),
    TO_CODE CHAR(20),
    QUANTITY NUMERIC(15,3),
    QUANTITY2 NUMERIC(15,3),
    DOCTYPE CHAR(15),
    DOCNUMBER CHAR(20),
    DOCDATE TIMESTAMP,
    DOCUMENT_ID INTEGER,
    DOCSECTION INTEGER,
    BASEDOCTYPE CHAR(15),
    BASEDOCNUMBER CHAR(20),
    BASEDOCDATE TIMESTAMP)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE WH_P_CREATE_OUT_BIN_DETAIL (
    WAREHOUSE_ID INTEGER,
    BIN_CODE CHAR(20),
    QUAN NUMERIC(15,3),
    BATCH_ID INTEGER,
    DOCSPEC_ID INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE WH_P_OUTCOME_SERIAL_NUM (
    SPEC_ID INTEGER,
    BATCHHIST_ID INTEGER,
    SERIAL_NUM VARCHAR(50))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE WH_QUAN_ON_WAREHOUSES (
    CATALOG_ID INTEGER,
    USER_ID INTEGER)
RETURNS (
    WH_CODE CHAR(20),
    FACT NUMERIC(18,3),
    PLAN_IN NUMERIC(18,3),
    PLAN_OUT NUMERIC(18,3),
    RESERVE NUMERIC(18,3),
    AVAILABLE NUMERIC(18,3),
    FACT2 NUMERIC(18,3),
    PLAN_IN2 NUMERIC(18,3),
    PLAN_OUT2 NUMERIC(18,3),
    RESERVE2 NUMERIC(18,3),
    AVAILABLE2 NUMERIC(18,3))
AS
BEGIN
  EXIT;
END^

CREATE PROCEDURE WH_F_GET_QUAN_IN_SECTION (
    SECTION_CODE CHAR(20),
    WAREHOUSE_ID INTEGER,
    CATALOG_CODE CHAR(20))
RETURNS (
    QUANTITY NUMERIC(15,3))
AS
BEGIN
  EXIT;
END^
