<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping>

  <query name="Planing.GenericItem.resetAllLowLevelCodes">
    <![CDATA[
      update com.mg.merp.planning.model.GenericItem gi
      set gi.LowLevelCode = 1
    ]]>
  </query>

  <query name="Planing.MPSProcessor.clearMPS">
    <![CDATA[
      delete from com.mg.merp.planning.model.MpsLine mpsline where mpsline.Mps = :mps
    ]]>
  </query>

  <query name="Planing.MPSProcessor.loadDemandFromOrder">
    <![CDATA[
      select gi.Id, os.Catalog.Id, os.RequiredDate, sum(os.QtyOutstanding)
      from com.mg.merp.warehouse.model.OrderSpec os, com.mg.merp.warehouse.model.OrderHead oh, com.mg.merp.planning.model.GenericItem gi
      where os.DocHead = oh and oh.DocSection.Id = :docSectionId and oh.Status = :status
        and os.Status = :status and os.ClosedForPlanning = false and gi.PlanningItemFlag = true
        and (os.RequiredDate between :startDate and :endDate) and os.QtyOutstanding > 0
        and os.Catalog = gi.Catalog
      group by gi, os.Catalog, os.RequiredDate
    ]]>
  </query>

  <query name="Planing.MPSProcessor.loadDemandFromSalesForecastByCatalog">
    <![CDATA[
      select gi.Id, pf.Id, sum(pf.ForecastQuantity)
      from com.mg.merp.planning.model.PlanningForecast pf, com.mg.merp.planning.model.GenericItem gi
      where pf.Catalog = gi.Catalog and pf.PlanningLevel = :planningLevel and pf.ForecastType = com.mg.merp.planning.model.ForecastType.SALE
        and ((pf.ForecastMethod = com.mg.merp.planning.model.ForecastMethod.BY_DATE and (pf.RequiredDate between :startDate and :endDate))
          or (pf.ForecastMethod = com.mg.merp.planning.model.ForecastMethod.BY_PERIOD and (pf.BucketOffset between :startBucket and :endBucket)))
        and pf.ForecastQuantity > 0 and pf.ForecastVersion = :forecastVersion and gi.PlanningItemFlag = true
      group by gi, pf
    ]]>
  </query>

  <query name="Planing.MPSProcessor.loadDemandFromSalesForecastByGenericItem">
    <![CDATA[
      select pf.Id, sum(pf.ForecastQuantity)
      from com.mg.merp.planning.model.PlanningForecast pf, com.mg.merp.planning.model.GenericItem gi
      where pf.PlanningItem = gi and pf.PlanningLevel = :planningLevel and pf.ForecastType = com.mg.merp.planning.model.ForecastType.SALE
        and ((pf.ForecastMethod = com.mg.merp.planning.model.ForecastMethod.BY_DATE and (pf.RequiredDate between :startDate and :endDate))
          or (pf.ForecastMethod = com.mg.merp.planning.model.ForecastMethod.BY_PERIOD and (pf.BucketOffset between :startBucket and :endBucket)))
        and pf.ForecastQuantity > 0 and pf.ForecastVersion = :forecastVersion and gi.PlanningItemFlag = true
      group by pf
    ]]>
  </query>

  <query name="Planing.MPSProcessor.loadProductionOutputs">
    <![CDATA[
      select j.Id, gi.Id, sum(j.QtyReleased - j.QtyComplete)
      from com.mg.merp.manufacture.model.Job j, com.mg.merp.planning.model.GenericItem gi
      where j.Catalog = gi.Catalog and (j.EndDate between :startDate and :endDate)
        and j.JobStatus = com.mg.merp.manufacture.model.JobStatus.RUNNING
      group by j, gi
    ]]>
  </query>

  <query name="Planing.MPSProcessor.loadProductionInputs">
    <![CDATA[
      select jm.Id, gi.Id, sum(j.QtyReleased - j.QtyComplete)
      from com.mg.merp.manufacture.model.JobMaterial jm, com.mg.merp.manufacture.model.JobRoute jr, com.mg.merp.manufacture.model.Job j, com.mg.merp.planning.model.GenericItem gi
      where jm.Catalog = gi.Catalog and jm.Oper = jr and jr.Job = j and (j.EndDate between :startDate and :endDate)
        and j.JobStatus = com.mg.merp.manufacture.model.JobStatus.RUNNING
      group by jm, gi
    ]]>
  </query>

  <query name="Planing.MRPInputs.clear">
    <![CDATA[
      delete from com.mg.merp.planning.model.MrpInputs mrpIn where mrpIn.MrpVersionControl = :mrpVersionControl
    ]]>
  </query>

  <query name="Planing.MRPOutputs.clear">
    <![CDATA[
      delete from com.mg.merp.planning.model.MrpOutputs mrpOut where mrpOut.MrpVersionControl = :mrpVersionControl
    ]]>
  </query>

  <query name="Planing.MRPRecommendation.clear">
    <![CDATA[
      delete from com.mg.merp.planning.model.MrpRecommendation mrpRec where mrpRec.MrpVersionControl = :mrpVersionControl
    ]]>
  </query>

  <query name="Planing.MRPReport.clear">
    <![CDATA[
      delete from com.mg.merp.planning.model.MrpReport mrpRep where mrpRep.MrpVersionControl = :mrpVersionControl
    ]]>
  </query>

  <query name="Planing.MRPShortage.clear">
    <![CDATA[
      delete from com.mg.merp.planning.model.MrpShortage mrpS where mrpS.MrpVersionControl = :mrpVersionControl
    ]]>
  </query>

  <query name="Planing.MRPProcessor.loadMPSLine">
    <![CDATA[
      select mpsl
      from com.mg.merp.planning.model.MpsLine mpsl, com.mg.merp.planning.model.MrpVersionMps mrpmps
      where mpsl.Mps = mrpmps.Mps and (mpsl.PlannedQty > 0 or mpsl.AdjustmentQty > 0) and mpsl.MpsOrdered = false
        and mrpmps.MrpVersionControl = :mrpVersionControl
      order by mpsl.Mps.PlanningLevel.PlanningLevelNum, mpsl.Mps.PlanningDate, mpsl.BucketOffset
    ]]>
  </query>

  <query name="Planing.MRPProcessor.loadSalesOrder">
    <![CDATA[
      select os.Id, oh.DocDate, oh.DocNumber, os.RequiredDate, os.Catalog.Id, os.Warehouse.Id, os.Measure1.Id, sum(os.QtyOutstanding)
      from com.mg.merp.warehouse.model.OrderSpec os, com.mg.merp.warehouse.model.OrderHead oh
      where os.DocHead = oh and oh.DocSection.Id = 22 and oh.Status = com.mg.merp.warehouse.model.OrderStatus.ORDERED
        and os.Status = com.mg.merp.warehouse.model.OrderStatus.ORDERED
        and (os.RequiredDate between :startDate and :endDate) and os.QtyOutstanding > 0
      group by os, oh.DocDate, oh.DocNumber, os.RequiredDate, os.Catalog, os.Warehouse, os.Measure1
    ]]>
  </query>

  <query name="Planing.MRPProcessor.loadPurchaseOrder">
    <![CDATA[
      select os.Id, oh.DocDate, oh.DocNumber, os.RequiredDate, os.Catalog.Id, os.Warehouse.Id, os.Measure1.Id, oh.FixedInput, sum(os.QtyOutstanding)
      from com.mg.merp.warehouse.model.OrderSpec os, com.mg.merp.warehouse.model.OrderHead oh
      where os.DocHead = oh and oh.DocSection.Id = 21 and oh.Status = com.mg.merp.warehouse.model.OrderStatus.ORDERED
        and os.Status = com.mg.merp.warehouse.model.OrderStatus.ORDERED
        and (os.RequiredDate between :startDate and :endDate) and os.QtyOutstanding > 0
      group by os, oh.DocDate, oh.DocNumber, os.RequiredDate, os.Catalog, os.Warehouse, os.Measure1, oh.FixedInput
    ]]>
  </query>

</hibernate-mapping>
