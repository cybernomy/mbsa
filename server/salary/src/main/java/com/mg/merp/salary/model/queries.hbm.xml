<?xml version="1.0"?>
<!-- ======================================================================= -->
<!-- Copyright (c) 1998 - 2007 BusinessTechnology, Ltd.                      -->
<!-- All rights reserved                                                     -->
<!--                                                                         -->
<!-- This program is the proprietary and confidential information            -->
<!-- of BusinessTechnology, Ltd. and may be used and disclosed only          -->
<!-- as authorized in a license agreement authorizing and                    -->
<!-- controlling such use and disclosure                                     -->
<!--                                                                         -->
<!-- Millennium Business Suite Anywhere System.                              -->
<!-- ======================================================================= -->

<!-- $Id: queries.hbm.xml,v 1.1 2007/08/21 05:27:58 sharapov Exp $ -->

<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<hibernate-mapping>
  
  <query name="Salary.TableHelper.isScheduleExists">
    <![CDATA[
  		select tsh.Id 
  		from ScheduleHead tsh, WorkSchedule pws, StaffListPosition pslp, StaffListUnit pslu, PositionFill spf
  		where (pws.id = tsh.WorkSchedule.Id) 
  			and (pslp.WorkSchedule.Id = pws.Id)
  			and (spf.SlPositionUnique.SlPositionUniqueId = pslp.SlPositionUniqueId)
  			and (pslu.StaffList = :staffList)
  			and (spf = :positionFill) 
  			and (:actualDate between pslp.BeginDate and pslp.EndDate)
    ]]>
  	</query>
  
  	<query name="Salary.TableHelper.daysQuantityFromSchedule">
    <![CDATA[
    	select count(tss.id)
    	from ScheduleSpec tss, ScheduleHead tsh, WorkSchedule pws, StaffListPosition pslp, StaffListUnit pslu, PositionFill spf, TimeKind ttk 
    	where (ttk = tss.TimeKind)
    		and (spf.SlPositionUnique.SlPositionUniqueId = pslp.SlPositionUniqueId)
    		and (pslu = pslp.StaffListUnit)
    		and (pslp.WorkSchedule = pws)
    		and (pws = tsh.WorkSchedule)
    		and (tsh = tss.ScheduleHead)
    		and (ttk.Code = :timeKindCode)
    		and (pslu.StaffList = :staffList)
    		and (spf = :positionFill)
    		and (tss.ScheduleDate between :beginDate and :endDate)
  	]]>
  	</query>
  
 	<query name="Salary.TableHelper.hoursQuantityFromSchedule">
   	<![CDATA[
		select sum(tss.HoursQuantity)
		from ScheduleSpec tss, ScheduleHead tsh, WorkSchedule pws, StaffListPosition pslp, StaffListUnit pslu, PositionFill spf, TimeKind ttk
		where (ttk = tss.TimeKind)
			and (spf.SlPositionUnique.SlPositionUniqueId = pslp.SlPositionUniqueId)
			and (pslu = pslp.StaffListUnit)
			and (pslp.WorkSchedule = pws)
			and (pws = tsh.WorkSchedule)
			and (tsh = tss.ScheduleHead)
			and (ttk.Code = :timeKindCode)
			and (pslu.StaffList = :staffList)
			and (spf = :positionFill)
			and (tss.ScheduleDate between :beginDate and :endDate)
    ]]>
 	</query>
  
 	<query name="Salary.SalaryHelper.workNorms">
   	<![CDATA[
   		select pwn.WorkDaysNumber, pwn.WorkHoursNumber
   		from WorkTimeNorm pwn, CalcPeriod pcp, WorkSchedule pws, StaffListPosition pslp, StaffListUnit pslu, PositionFill spf 
   		where (pslu.StaffList = :staffList) 
			and (spf = :positionFill) 
			and (:actualDate between pcp.BeginDate and pcp.EndDate) 
			and (pcp = pwn.CalcPeriod) 
			and (pws = pwn.WorkSchedule) 
			and (pslp.WorkSchedule = pws) 
			and (pslu = pslp.StaffListUnit) 
			and (spf.SlPositionUnique.SlPositionUniqueId = pslp.SlPositionUniqueId)
    ]]>
 	</query>
 	
 	<query name="Salary.CalcListServiceBean.removeFees">
   	<![CDATA[
   		delete from CalcListFee sclf where (sclf.CalcListSection in (select scls from CalcListSection scls where scls.CalcList = :calcList)) and (sclf.DontRecalc = 0)
    ]]>
 	</query>
 	
 	<query name="Salary.CalcListServiceBean.clearSectionSum">
   	<![CDATA[
   		update CalcListSection scls set scls.TotalSumma = 0 where scls.CalcList = :calcList
    ]]>
 	</query>
 	
 	<query name="Salary.CalcListServiceBean.clearTotalSum">
   	<![CDATA[
		update CalcList scl set scl.TotalSumma = 0, scl.IsCalculated = 0, scl.NeedParams = 0 where scl.Id = :calcList
    ]]>
 	</query>
 	
 	<query name="Salary.CalcListServiceBean.setSectionSum">
   	<![CDATA[
		update CalcListSection scls set scls.TotalSumma = :totalSum where scls.Id = :calcListSectionId
    ]]>
 	</query>
 	
 	<query name="Salary.CalcListServiceBean.openOrCloseCalcList">
   	<![CDATA[
		update CalcList scl set scl.IsClosed = :isClosed where scl.Id in (:calcListIds)
    ]]>
 	</query>
  
</hibernate-mapping>
