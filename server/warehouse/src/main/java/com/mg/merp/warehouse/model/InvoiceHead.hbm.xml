<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
<!-- 
        Auto-generated mapping file from
        the hibernate.org cfg2hbm engine
-->
  <joined-subclass name="com.mg.merp.warehouse.model.InvoiceHead" extends="com.mg.merp.document.model.DocHead" table="INVOICEHEAD">
    <meta attribute="extends">com.mg.merp.document.model.DocHead</meta>
    <!-- <id name="Id" type="int">
      <column name="ID" not-null="true" unique="true" sql-type="INTEGER" />
      generator class="sequence">
        <param name="sequence">INVOICEHEAD_ID_GEN</param>
      </generator
    </id>-->
    <key on-delete="cascade">
      <column name="DOCHEAD_ID" not-null="true" />
    </key>
    <many-to-one name="PartnerToBankReq" class="com.mg.merp.reference.model.BankAccount">
      <column name="PARTNERTO_BANKREQ" not-null="false" />
    </many-to-one>
    <many-to-one name="Consignee" class="com.mg.merp.reference.model.Contractor">
      <column name="CONSIGNEE" not-null="false" />
    </many-to-one>
    <many-to-one name="Shipper" class="com.mg.merp.reference.model.Contractor">
      <column name="SHIPPER" not-null="false" />
    </many-to-one>
    <many-to-one name="Responsible" class="com.mg.merp.reference.model.Contractor">
      <column name="RESPONSIBLE" not-null="false" />
    </many-to-one>
    <many-to-one name="PartnerFromBankReq" class="com.mg.merp.reference.model.BankAccount">
      <column name="PARTNERFROM_BANKREQ" not-null="false" />
    </many-to-one>
    <many-to-one name="Consumer" class="com.mg.merp.reference.model.Contractor">
      <column name="CONSUMER" not-null="false" />
    </many-to-one>
    <property name="SummaCurWithDiscount" type="java.math.BigDecimal">
      <column name="SUMMACUR_WITH_DISCOUNT" scale="4" precision="15" not-null="false" sql-type="NUMERIC" />
    </property>
    <property name="SummaNatWithDiscount" type="java.math.BigDecimal">
      <column name="SUMMANAT_WITH_DISCOUNT" scale="4" precision="15" not-null="false" sql-type="NUMERIC" />
    </property>
    <property name="AddExpenses" type="java.math.BigDecimal">
      <column name="ADD_EXPENSES" scale="4" precision="15" not-null="false" sql-type="NUMERIC" />
    </property>
    <property name="DiscountOnDoc" type="java.math.BigDecimal">
      <column name="DISCOUNT_ON_DOC" scale="6" precision="18" not-null="false" sql-type="NUMERIC" />
    </property>
    <property name="DiscountOnLine" type="java.math.BigDecimal">
      <column name="DISCOUNT_ON_LINE" scale="6" precision="18" not-null="false" sql-type="NUMERIC" />
    </property>
    <property name="ToPayDocNumber" type="java.lang.String">
      <column name="TOPAYDOCNUMBER" length="20" not-null="false" sql-type="CHAR" />
    </property>
    <property name="ToPayDocDate" type="java.util.Date">
      <column name="TOPAYDOCDATE" not-null="false" sql-type="TIMESTAMP" />
    </property>
    <property name="Comment" type="java.lang.String">
      <column name="`COMMENT`" length="1024" not-null="false" sql-type="VARCHAR" />
    </property>
    <property name="ProviderOKONH" type="java.lang.String">
      <formula>(select p1.okonh from dochead d1 left join contractor c1 on c1.id = d1.from_id left join partner p1 on p1.contractor_id = c1.id where d1.id = DOCHEAD_ID)</formula>
    </property>
    <property name="ProviderINN" type="java.lang.String">
      <formula>(select p2.inn from dochead d2 left join contractor c2 on c2.id = d2.from_id left join partner p2 on p2.contractor_id = c2.id where d2.id = DOCHEAD_ID)</formula>
    </property>
    <property name="ProviderOKPO" type="java.lang.String">
      <formula>(select p3.okpo from dochead d3 left join contractor c3 on c3.id = d3.from_id left join partner p3 on p3.contractor_id = c3.id where d3.id = DOCHEAD_ID)</formula>
    </property>
    <property name="CustomerOKPO" type="java.lang.String">
      <formula>(select p4.okpo from dochead d4 left join contractor c4 on c4.id = d4.to_id left join partner p4 on p4.contractor_id = c4.id where d4.id = DOCHEAD_ID)</formula>
    </property>
    <property name="CustomerOKONH" type="java.lang.String">
      <formula>(select p5.okonh from dochead d5 left join contractor c5 on c5.id = d5.to_id left join partner p5 on p5.contractor_id = c5.id where d5.id = DOCHEAD_ID)</formula>
    </property>
    <property name="CustomerINN" type="java.lang.String">
      <formula>(select p6.inn from dochead d6 left join contractor c6 on c6.id = d6.to_id left join partner p6 on p6.contractor_id = c6.id where d6.id = DOCHEAD_ID)</formula>
    </property>
  </joined-subclass>
</hibernate-mapping>
