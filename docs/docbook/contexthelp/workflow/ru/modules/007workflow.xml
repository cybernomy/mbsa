<!-- <?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3CR3//EN"
                      "../../../../docbook-support/support/docbook-dtd/docbookx.dtd"
[
<!ENTITY chap_copyright SYSTEM "modules/copyright.xml">
<!ENTITY chap_007wkfl SYSTEM "modules/007workflow.xml">
<!ENTITY acc "Бухгалтерский учёт">
<!ENTITY merp "Millennium ERP">
<!ENTITY td "Типы документов">
<!ENTITY ref "Прикладные справочники">
<!ENTITY cont_centr "Центр управления">
<!ENTITY liab "Обязательства">
<!ENTITY contr "Контракты">
<!ENTITY workflow "Потоки работ">
]> -->
<chapter id="007wkfl">
  <title>Алгоритмы</title>
  
  	<para>Выполнение потока регулируется алгоритмами, которые хранятся в <emphasis>Репозитории 
	алгоритмов</emphasis> и указываются в <link linkend="002wkfl_01_01">моделях действия</link> 
	потоков работ. Подробно об алгоритмах, использующихся в описании потоков, Вы можете прочитать 
	в &quot;Руководстве администратора системы &merp;&quot;. </para>
	 
  
	<section id="007wkfl_01">
	   <title>Алгоритм выполнения</title>
    
	   	<para>Предназначен для выполнения каких-либо действий при выполнении потока. 
		Любой алгоритм должен вернуть результат выполнения. По умолчанию он имеет 
		значение <literal>CompletedYes</literal>. Это говорит о том, что если не 
		возникло никаких исключительных ситуаций, то выполнение алгоритма будет 
		признано и все действия зафиксированы.  </para>
    
		<para>Вы можете вернуть результат <literal>CompletedNo</literal>, тем самым 
		отменив все действия, связанные с этим этапом.  </para>
	 </section>
	 
	 
	 <section id="007wkfl_02">
	   <title>Алгоритм отката</title>
	   
	   	<para>Предназначен для выполнения <link linkend="006wkfl">отката</link> 
		текущего этапа. Он также требует возвращения результата. По умолчанию он 
		имеет значение <literal>CompletedYes</literal>.  </para>
	
	   	<para><emphasis>Примечание: </emphasis> алгоритмы потоков работ поддерживают 
		механизм обратных вызовов, т.е. могут учитывать ввод данных и интерактивно 
		взаимодействовать с пользователем. </para>
	</section>
	
	
	<section id="007wkfl_03">
	   <title>Алгоритм комментария</title>
	   
	   	<para>Предназначен для создания комментария к назначению. Например, алгоритм 
		комментария может указывать конкретный номер документа, который нужно 
		отработать. В комментарии может быть просто написано &quot;Примите это 
		назначение&quot;, если от исполнителя (ресурса) требуется просто принять 
		адресованное ему назначение.  </para>
	
		<para>Рекомендуется не выполнять в алгоритме комментария никаких действий, 
		связанных с изменением данных.  </para>
	</section>
	
	<para>Алгоритмы потоков работ имеют <link linkend="007wkfl_04">дополнительные 
	классы</link> для управления выполнением и изменением состояния. </para>
	
	
	<section id="007wkfl_04">
	   <title>Дополнительные классы алгоритмов</title>
	   
	   <para>Алгоритмы потоков работ имеют дополнительные классы для управления 
	   выполнением и изменением состояния. </para>
	   
	   <section id="007wkfl_04_01">
	      <title>TWfProcessHelper</title>
	      
	      	<para>Класс <literal>TWfProcessHelper</literal> имеет следующие методы:  </para>
	   
	   <para><literal>procedure SetResult(const AName, AValue: string) // </literal> 
	   установка результата для потока работ. Это позволяет передавать данные на 
	   протяжении всего выполнения потока работ. Например, в одном этапе Вы можете 
	   сохранить какое-либо значение под любым именем, а затем считать его для использования.</para>
	   
	   <para><literal>function GetResult(const AName: string): string; //</literal> 
	   считывание результата, установленного предыдущим методом.  </para>
	   
	   <para><literal>function GetActivityResult(const AKey, Attr: string): string; //</literal> 
	   считывание результата установленного в алгоритме этапа. </para>
	   
	   <para><literal>procedure SuspendActivity(const AKey: string); // </literal> 
	   приостановка потока работ.</para>

	   <para><literal>procedure ResumeActivity(const AKey: string); // </literal> 
	   возобновление потока работ. </para>

	   <para><literal>procedure Continue; // </literal> продолжение потока работ.  </para>
	   </section>
	   
	   
	   <section id="007wkfl_04_02">
	      <title>TWfActivityHelper</title>
	   
	      	<para>Класс <literal>TWfActivityHelper</literal> имеет следующие методы:  </para>
	   
	  	<para><literal>procedure SetResult(const AName, AValue: string) // </literal>
		установка результата для потока работ. Это позволяет передавать 
		данные на протяжении всего выполнения потока работ. Например, 
		в одном этапе Вы можете сохранить какое-либо значение под любым 
		именем, а затем считать его для использования.</para>
		
		<para><literal>function GetResult(const AName: string): string; // </literal>
		считывание результата установленного предыдущим методом.</para>
		
		<para><literal>function GetActivityResult(const AKey, Attr: string): string; // </literal> 
		считывание результата установленного в алгоритме этапа.</para>
		
		<para><literal>procedure SuspendActivity(const AKey: string); // </literal> 
		 приостановка потока работ.</para>
		
		<para><literal>procedure ResumeActivity(const AKey: string); // </literal> 
		возобновление потока работ.</para>

		<para><literal>procedure Continue; // </literal> продолжение потока работ.  </para>
	   </section>
	   
	   <section id="007wkfl_04_03">
	      <title>TDocumentProcessHelper</title>
	      
	      	<para>Класс <literal>TDocumentProcessHelper</literal> имеет следующие методы:  </para>
	   
		<para><literal>function CreateDocument(const ADocSection: TGlobalDocSection): TIDType; // 
		</literal> создание документа. </para>
		
		<para><literal>function CreateDocumentOverModel(const ADocSection: 
		TGlobalDocSection; const AModelId: TIDType): TIDType; // </literal>
		создание документа на основании образца. </para>
		
		<para><literal>procedure RemoveDocument(const ADocSection: TGlobalDocSection; 
		const ADocumentId: TIDType); // </literal> удаление документа. </para>
		
		<para><literal>function Execute(const ADocumentId: TIDType): integer; // 
		</literal> отработка документа по документообороту. </para>
		
		<para><literal>function Rollback(const ADocumentId: TIDType): integer; // </literal> 
		откат документооборота. </para>
		
	   </section>
	</section>
    
  </chapter>
