package com.mg.merp.manufacture.model;
// Generated Oct 4, 2015 2:18:05 AM by Hibernate Tools 3.6.0.Final


import com.mg.framework.support.orm.OmittedWhitespaceStringType;
import com.mg.merp.core.model.Folder;
import com.mg.merp.core.model.SysClient;
import com.mg.merp.core.model.SysCompany;
import com.mg.merp.document.model.DocHead;
import com.mg.merp.document.model.DocSection;
import com.mg.merp.document.model.DocType;
import com.mg.merp.mfreference.model.Crew;
import com.mg.merp.mfreference.model.WorkCenter;
import com.mg.merp.qualitycontrol.model.ScrapReason;
import com.mg.merp.qualitycontrol.model.ScrapType;
import com.mg.merp.reference.model.CalcTaxesKind;
import com.mg.merp.reference.model.Contractor;
import com.mg.merp.reference.model.Currency;
import com.mg.merp.reference.model.CurrencyRateAuthority;
import com.mg.merp.reference.model.CurrencyRateType;
import com.mg.merp.reference.model.PriceListHead;
import com.mg.merp.reference.model.PriceType;
import java.math.BigDecimal;
import java.util.Date;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

/**
 * ScrapDocumentHead generated by hbm2java
 */
@Entity
@Table(name="MF_SCRAP_DOC_HEAD"
)
public class ScrapDocumentHead extends com.mg.merp.document.model.DocHead implements java.io.Serializable {


     private Job DetectJob;
     private Contractor CauseContractor;
     private ScrapType ScrapType;
     private ScrapReason ScrapReason;
     private Contractor CauseEmployee;
     private Crew CauseCrew;
     private Job CauseJob;
     private WorkCenter DetectWC;
     private Crew DetectCrew;
     private JobRoute DetectOper;
     private Contractor DetectEmployee;
     private JobRoute CauseOper;
     private Contractor DetectContractor;
     private WorkCenter CauseWC;

    public ScrapDocumentHead() {
    }

	
    public ScrapDocumentHead(SysCompany SysCompany, DocSection DocSection, Short Requester, boolean ManualDocNumber) {
        super(SysCompany, DocSection, Requester, ManualDocNumber);        
    }
    public ScrapDocumentHead(SysCompany SysCompany, Contractor Through, Contractor From, CurrencyRateAuthority CurrencyRateAuthority, Contractor SrcMol, PriceType PriceType, Folder DiscountFolder, Folder Folder, DocType DocType, DocHead Contract, Currency Currency, Contractor SrcStock, DocType ContractType, Contractor To, Contractor DstMol, DocHead BaseDocument, SysClient SysClient, Contractor DstStock, CalcTaxesKind CalcTaxesKind, DocType BaseDocType, CurrencyRateType CurrencyRateType, PriceListHead PriceList, DocSection DocSection, OmittedWhitespaceStringType DocNumber, Date DocDate, BigDecimal CurCource, BigDecimal SumCur, BigDecimal SumNat, OmittedWhitespaceStringType BaseDocNumber, Date BaseDocDate, OmittedWhitespaceStringType ContractNumber, Date ContractDate, BigDecimal Weight, BigDecimal Volume, Short Requester, byte[] Original, String UNID, boolean ManualDocNumber, String Description, Job DetectJob, Contractor CauseContractor, ScrapType ScrapType, ScrapReason ScrapReason, Contractor CauseEmployee, Crew CauseCrew, Job CauseJob, WorkCenter DetectWC, Crew DetectCrew, JobRoute DetectOper, Contractor DetectEmployee, JobRoute CauseOper, Contractor DetectContractor, WorkCenter CauseWC) {
        super(SysCompany, Through, From, CurrencyRateAuthority, SrcMol, PriceType, DiscountFolder, Folder, DocType, Contract, Currency, SrcStock, ContractType, To, DstMol, BaseDocument, SysClient, DstStock, CalcTaxesKind, BaseDocType, CurrencyRateType, PriceList, DocSection, DocNumber, DocDate, CurCource, SumCur, SumNat, BaseDocNumber, BaseDocDate, ContractNumber, ContractDate, Weight, Volume, Requester, Original, UNID, ManualDocNumber, Description);        
       this.DetectJob = DetectJob;
       this.CauseContractor = CauseContractor;
       this.ScrapType = ScrapType;
       this.ScrapReason = ScrapReason;
       this.CauseEmployee = CauseEmployee;
       this.CauseCrew = CauseCrew;
       this.CauseJob = CauseJob;
       this.DetectWC = DetectWC;
       this.DetectCrew = DetectCrew;
       this.DetectOper = DetectOper;
       this.DetectEmployee = DetectEmployee;
       this.CauseOper = CauseOper;
       this.DetectContractor = DetectContractor;
       this.CauseWC = CauseWC;
    }
   

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="DETECT_JOB_ID")
    public Job getDetectJob() {
        return this.DetectJob;
    }
    
    public void setDetectJob(Job DetectJob) {
        this.DetectJob = DetectJob;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="CAUSE_CONTRACTOR_ID")
    public Contractor getCauseContractor() {
        return this.CauseContractor;
    }
    
    public void setCauseContractor(Contractor CauseContractor) {
        this.CauseContractor = CauseContractor;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="SCRAP_TYPE_ID")
    public ScrapType getScrapType() {
        return this.ScrapType;
    }
    
    public void setScrapType(ScrapType ScrapType) {
        this.ScrapType = ScrapType;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="SCRAP_REASON_ID")
    public ScrapReason getScrapReason() {
        return this.ScrapReason;
    }
    
    public void setScrapReason(ScrapReason ScrapReason) {
        this.ScrapReason = ScrapReason;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="CAUSE_EMPLOYEE_ID")
    public Contractor getCauseEmployee() {
        return this.CauseEmployee;
    }
    
    public void setCauseEmployee(Contractor CauseEmployee) {
        this.CauseEmployee = CauseEmployee;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="CAUSE_CREW_ID")
    public Crew getCauseCrew() {
        return this.CauseCrew;
    }
    
    public void setCauseCrew(Crew CauseCrew) {
        this.CauseCrew = CauseCrew;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="CAUSE_JOB_ID")
    public Job getCauseJob() {
        return this.CauseJob;
    }
    
    public void setCauseJob(Job CauseJob) {
        this.CauseJob = CauseJob;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="DETECT_WC_ID")
    public WorkCenter getDetectWC() {
        return this.DetectWC;
    }
    
    public void setDetectWC(WorkCenter DetectWC) {
        this.DetectWC = DetectWC;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="DETECT_CREW_ID")
    public Crew getDetectCrew() {
        return this.DetectCrew;
    }
    
    public void setDetectCrew(Crew DetectCrew) {
        this.DetectCrew = DetectCrew;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="DETECT_OPER_ID")
    public JobRoute getDetectOper() {
        return this.DetectOper;
    }
    
    public void setDetectOper(JobRoute DetectOper) {
        this.DetectOper = DetectOper;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="DETECT_EMPLOYEE_ID")
    public Contractor getDetectEmployee() {
        return this.DetectEmployee;
    }
    
    public void setDetectEmployee(Contractor DetectEmployee) {
        this.DetectEmployee = DetectEmployee;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="CAUSE_OPER_ID")
    public JobRoute getCauseOper() {
        return this.CauseOper;
    }
    
    public void setCauseOper(JobRoute CauseOper) {
        this.CauseOper = CauseOper;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="DETECT_CONTRACTOR_ID")
    public Contractor getDetectContractor() {
        return this.DetectContractor;
    }
    
    public void setDetectContractor(Contractor DetectContractor) {
        this.DetectContractor = DetectContractor;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="CAUSE_WC_ID")
    public WorkCenter getCauseWC() {
        return this.CauseWC;
    }
    
    public void setCauseWC(WorkCenter CauseWC) {
        this.CauseWC = CauseWC;
    }




}


