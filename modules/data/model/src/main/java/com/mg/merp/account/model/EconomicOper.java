package com.mg.merp.account.model;

import com.mg.merp.core.model.Folder;
import com.mg.merp.core.model.SysClient;
import com.mg.merp.document.model.DocHead;
import com.mg.merp.document.model.DocType;
import com.mg.merp.reference.model.Contractor;
import java.math.BigDecimal;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.SEQUENCE;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import org.hibernate.annotations.Formula;
import com.mg.framework.api.annotations.DataItemName;

/**
 * EconomicOper generated by hbm2java
 */
@Entity
@Table(name = "ECONOMICOPER")
public class EconomicOper extends com.mg.merp.core.model.AbstractEntity implements java.io.Serializable {

    private int Id;

    private Contractor From;

    private Contractor To;

    private DocHead ConfirmDoc;

    private Folder Folder;

    private SysClient SysClient;

    private SpecMark SpecMark;

    private Date KeepDate;

    private String Comment;

    private DocType BaseDocType;

    private String BaseDocNumber;

    private Date BaseDocDate;

    private DocHead BaseDoc;

    private DocType ConfirmDocType;

    private String ConfirmDocNumber;

    private Date ConfirmDocDate;

    private BigDecimal Summa;

    private Integer ContractId;

    private DocType ContractType;

    private String ContractNumber;

    private Date ContractDate;

    private Integer UserId;

    private boolean BatchOperation;

    private Set<EconomicSpec> EconomicSpecs = new HashSet<EconomicSpec>(0);

    public EconomicOper() {
    }

    public EconomicOper(Contractor From, Contractor To, DocHead ConfirmDoc, Folder Folder, SysClient SysClient, SpecMark SpecMark, Date KeepDate, String Comment, DocType BaseDocType, String BaseDocNumber, Date BaseDocDate, DocHead BaseDoc, DocType ConfirmDocType, String ConfirmDocNumber, Date ConfirmDocDate, Integer ContractId, DocType ContractType, String ContractNumber, Date ContractDate, Integer UserId, Set<EconomicSpec> EconomicSpecs) {
        this.From = From;
        this.To = To;
        this.ConfirmDoc = ConfirmDoc;
        this.Folder = Folder;
        this.SysClient = SysClient;
        this.SpecMark = SpecMark;
        this.KeepDate = KeepDate;
        this.Comment = Comment;
        this.BaseDocType = BaseDocType;
        this.BaseDocNumber = BaseDocNumber;
        this.BaseDocDate = BaseDocDate;
        this.BaseDoc = BaseDoc;
        this.ConfirmDocType = ConfirmDocType;
        this.ConfirmDocNumber = ConfirmDocNumber;
        this.ConfirmDocDate = ConfirmDocDate;
        this.ContractId = ContractId;
        this.ContractType = ContractType;
        this.ContractNumber = ContractNumber;
        this.ContractDate = ContractDate;
        this.UserId = UserId;
        this.EconomicSpecs = EconomicSpecs;
    }

    @SequenceGenerator(name = "generator", sequenceName = "ECONOMICOPER_ID_GEN")
    @Id
    @GeneratedValue(strategy = SEQUENCE, generator = "generator")
    @Column(name = "ID", unique = true, nullable = false, columnDefinition = "INTEGER")
    @DataItemName("ID")
    public int getId() {
        return this.Id;
    }

    public void setId(int Id) {
        this.Id = Id;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "FROM_ID")
    @DataItemName("Account.EconOper.From")
    public Contractor getFrom() {
        return this.From;
    }

    public void setFrom(Contractor From) {
        this.From = From;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "TO_ID")
    @DataItemName("Account.EconOper.To")
    public Contractor getTo() {
        return this.To;
    }

    public void setTo(Contractor To) {
        this.To = To;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "DOC_ID")
    public DocHead getConfirmDoc() {
        return this.ConfirmDoc;
    }

    public void setConfirmDoc(DocHead ConfirmDoc) {
        this.ConfirmDoc = ConfirmDoc;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "FOLDER_ID")
    public Folder getFolder() {
        return this.Folder;
    }

    public void setFolder(Folder Folder) {
        this.Folder = Folder;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "CLIENT_ID")
    public SysClient getSysClient() {
        return this.SysClient;
    }

    public void setSysClient(SysClient SysClient) {
        this.SysClient = SysClient;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "SPECMARK")
    public SpecMark getSpecMark() {
        return this.SpecMark;
    }

    public void setSpecMark(SpecMark SpecMark) {
        this.SpecMark = SpecMark;
    }

    @Column(name = "KEEPDATE", columnDefinition = "TIMESTAMP")
    @DataItemName("Account.EconOper.KeepDate")
    public Date getKeepDate() {
        return this.KeepDate;
    }

    public void setKeepDate(Date KeepDate) {
        this.KeepDate = KeepDate;
    }

    @Column(name = "COMMENT", columnDefinition = "VARCHAR", length = 256)
    @DataItemName("Account.EconOper.Comment")
    public String getComment() {
        return this.Comment;
    }

    public void setComment(String Comment) {
        this.Comment = Comment;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "DOCBASETYPE")
    @DataItemName("Account.EconOper.BaseDocType")
    public DocType getBaseDocType() {
        return this.BaseDocType;
    }

    public void setBaseDocType(DocType BaseDocType) {
        this.BaseDocType = BaseDocType;
    }

    @Column(name = "DOCBASENUMBER", columnDefinition = "CHAR", length = 20)
    @DataItemName("Account.EconOper.BaseDocNumber")
    public String getBaseDocNumber() {
        return this.BaseDocNumber;
    }

    public void setBaseDocNumber(String BaseDocNumber) {
        this.BaseDocNumber = BaseDocNumber;
    }

    @Column(name = "DOCBASEDATE", columnDefinition = "TIMESTAMP")
    @DataItemName("Account.EconOper.BaseDocDate")
    public Date getBaseDocDate() {
        return this.BaseDocDate;
    }

    public void setBaseDocDate(Date BaseDocDate) {
        this.BaseDocDate = BaseDocDate;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "DOCBASE_ID")
    public DocHead getBaseDoc() {
        return this.BaseDoc;
    }

    public void setBaseDoc(DocHead BaseDoc) {
        this.BaseDoc = BaseDoc;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "DOCTYPE")
    @DataItemName("Account.EconOper.DocType")
    public DocType getConfirmDocType() {
        return this.ConfirmDocType;
    }

    public void setConfirmDocType(DocType ConfirmDocType) {
        this.ConfirmDocType = ConfirmDocType;
    }

    @Column(name = "DOCNUMBER", columnDefinition = "CHAR", length = 20)
    @DataItemName("Account.EconOper.DocNumber")
    public String getConfirmDocNumber() {
        return this.ConfirmDocNumber;
    }

    public void setConfirmDocNumber(String ConfirmDocNumber) {
        this.ConfirmDocNumber = ConfirmDocNumber;
    }

    @Column(name = "DOCDATE", columnDefinition = "TIMESTAMP")
    @DataItemName("Account.EconOper.DocDate")
    public Date getConfirmDocDate() {
        return this.ConfirmDocDate;
    }

    public void setConfirmDocDate(Date ConfirmDocDate) {
        this.ConfirmDocDate = ConfirmDocDate;
    }

    @Formula(value = "(select sum(s.summanat) from economicspec s where s.economicoper_id = Id)")
    @DataItemName("Account.EconOper.Summa")
    public BigDecimal getSumma() {
        return this.Summa;
    }

    public void setSumma(BigDecimal Summa) {
        this.Summa = Summa;
    }

    @Column(name = "CONTRACT_ID", columnDefinition = "INTEGER")
    public Integer getContractId() {
        return this.ContractId;
    }

    public void setContractId(Integer ContractId) {
        this.ContractId = ContractId;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "CONTRACTTYPE")
    @DataItemName("Account.EconOper.ContractType")
    public DocType getContractType() {
        return this.ContractType;
    }

    public void setContractType(DocType ContractType) {
        this.ContractType = ContractType;
    }

    @Column(name = "CONTRACTNUMBER", columnDefinition = "CHAR", length = 20)
    @DataItemName("Account.EconOper.ContractNumber")
    public String getContractNumber() {
        return this.ContractNumber;
    }

    public void setContractNumber(String ContractNumber) {
        this.ContractNumber = ContractNumber;
    }

    @Column(name = "CONTRACTDATE", columnDefinition = "TIMESTAMP")
    @DataItemName("Account.EconOper.ContractDate")
    public Date getContractDate() {
        return this.ContractDate;
    }

    public void setContractDate(Date ContractDate) {
        this.ContractDate = ContractDate;
    }

    @Column(name = "USER_ID", columnDefinition = "INTEGER")
    public Integer getUserId() {
        return this.UserId;
    }

    public void setUserId(Integer UserId) {
        this.UserId = UserId;
    }

    @Formula(value = "(select count(*) from economicspec s where (s.accbatchdb_id is not null or s.accbatchkt_id is not null or s.accbatchhistorydb_id is not null or s.accbatchhistorykt_id is not null) and s.economicoper_id = Id)")
    public boolean isBatchOperation() {
        return this.BatchOperation;
    }

    public void setBatchOperation(boolean BatchOperation) {
        this.BatchOperation = BatchOperation;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "EconomicOper")
    public Set<EconomicSpec> getEconomicSpecs() {
        return this.EconomicSpecs;
    }

    public void setEconomicSpecs(Set<EconomicSpec> EconomicSpecs) {
        this.EconomicSpecs = EconomicSpecs;
    }
}

