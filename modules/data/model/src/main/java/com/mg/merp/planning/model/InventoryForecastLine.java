package com.mg.merp.planning.model;

import com.mg.merp.core.model.SysClient;
import com.mg.merp.reference.model.Contractor;
import com.mg.merp.reference.model.Measure;
import java.math.BigDecimal;
import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.SEQUENCE;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

/**
 * InventoryForecastLine generated by hbm2java
 */
@Entity
@Table(name = "PP_INVENTORY_FORECAST_LINE")
public class InventoryForecastLine extends com.mg.merp.core.model.AbstractEntity implements java.io.Serializable {

    private Integer Id;

    private InventoryForecast InventoryForecast;

    private SysClient SysClient;

    private GenericItem GenericItem;

    private Contractor Warehouse;

    private Measure Measure;

    private Date EffOnDate;

    private Date EffOffDate;

    private BigDecimal QtyOnHand;

    public InventoryForecastLine() {
    }

    public InventoryForecastLine(InventoryForecast InventoryForecast, SysClient SysClient, GenericItem GenericItem, Contractor Warehouse, Measure Measure, Date EffOnDate, Date EffOffDate, BigDecimal QtyOnHand) {
        this.InventoryForecast = InventoryForecast;
        this.SysClient = SysClient;
        this.GenericItem = GenericItem;
        this.Warehouse = Warehouse;
        this.Measure = Measure;
        this.EffOnDate = EffOnDate;
        this.EffOffDate = EffOffDate;
        this.QtyOnHand = QtyOnHand;
    }

    @SequenceGenerator(name = "generator", sequenceName = "PP_INV_FORECAST_LINE_ID_GEN")
    @Id
    @GeneratedValue(strategy = SEQUENCE, generator = "generator")
    @Column(name = "ID", unique = true, columnDefinition = "INTEGER")
    public Integer getId() {
        return this.Id;
    }

    public void setId(Integer Id) {
        this.Id = Id;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "INVENTORY_FORECAST_ID")
    public InventoryForecast getInventoryForecast() {
        return this.InventoryForecast;
    }

    public void setInventoryForecast(InventoryForecast InventoryForecast) {
        this.InventoryForecast = InventoryForecast;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "CLIENT_ID")
    public SysClient getSysClient() {
        return this.SysClient;
    }

    public void setSysClient(SysClient SysClient) {
        this.SysClient = SysClient;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "GENERIC_ITEM_ID")
    public GenericItem getGenericItem() {
        return this.GenericItem;
    }

    public void setGenericItem(GenericItem GenericItem) {
        this.GenericItem = GenericItem;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "WAREHOUSE_ID")
    public Contractor getWarehouse() {
        return this.Warehouse;
    }

    public void setWarehouse(Contractor Warehouse) {
        this.Warehouse = Warehouse;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "MEASURE_ID")
    public Measure getMeasure() {
        return this.Measure;
    }

    public void setMeasure(Measure Measure) {
        this.Measure = Measure;
    }

    @Column(name = "EFF_ON_DATE", columnDefinition = "TIMESTAMP")
    public Date getEffOnDate() {
        return this.EffOnDate;
    }

    public void setEffOnDate(Date EffOnDate) {
        this.EffOnDate = EffOnDate;
    }

    @Column(name = "EFF_OFF_DATE", columnDefinition = "TIMESTAMP")
    public Date getEffOffDate() {
        return this.EffOffDate;
    }

    public void setEffOffDate(Date EffOffDate) {
        this.EffOffDate = EffOffDate;
    }

    @Column(name = "QTY_ON_HAND", columnDefinition = "NUMERIC", precision = 18, scale = 3)
    public BigDecimal getQtyOnHand() {
        return this.QtyOnHand;
    }

    public void setQtyOnHand(BigDecimal QtyOnHand) {
        this.QtyOnHand = QtyOnHand;
    }
}

