package com.mg.merp.mfreference.model;

import com.mg.merp.core.model.Folder;
import com.mg.merp.core.model.SysClient;
import com.mg.merp.reference.model.Catalog;
import com.mg.merp.reference.model.Employees;
import com.mg.merp.reference.model.Measure;
import com.mg.merp.warehouse.model.Warehouse;
import java.math.BigDecimal;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.SEQUENCE;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Enumerated;
import javax.persistence.EnumType;

/**
 * Bom generated by hbm2java
 */
@Entity
@Table(name = "MF_BOM")
public class Bom extends com.mg.merp.core.model.AbstractEntity implements java.io.Serializable {

    private Integer Id;

    private Catalog Catalog;

    private Measure SetupTimeUM;

    private Folder Folder;

    private SysClient SysClient;

    private CostDetail StandartCostDetail;

    private Cell Cell;

    private Measure RunTimeUM;

    private BomType BomType;

    private BomStatus BomStatus;

    private Warehouse DefSrcStock;

    private Warehouse DefDstStock;

    private Employees DefSrcMol;

    private Employees DefDstMol;

    private Integer Revision;

    private Date RevisionDateTime;

    private Date RollUpDateTime;

    private BigDecimal SetupTicks;

    private BigDecimal RunTicks;

    private ScheduleDirection ScheduleDirection;

    private boolean UseMoveTimes;

    private boolean UseQueueTimes;

    private boolean UseFiniteCapacity;

    private BigDecimal Priority;

    private boolean PriorityFreezeFlag;

    private BigDecimal PcsPerHrCell;

    private boolean ApprovedFlag;

    private boolean BomVersionRequired;

    private boolean CreateJobApproved;

    private String Comment;

    private BigDecimal MinLotQty;

    private BigDecimal MaxLotQty;

    private BigDecimal LotIncrementQty;

    private BigDecimal PlanningLotQty;

    private Set<BomRoute> BomRoutes = new HashSet<BomRoute>(0);

    public Bom() {
    }

    public Bom(Catalog Catalog, Measure SetupTimeUM, Folder Folder, SysClient SysClient, CostDetail StandartCostDetail, Cell Cell, Measure RunTimeUM, BomType BomType, BomStatus BomStatus, Warehouse DefSrcStock, Warehouse DefDstStock, Employees DefSrcMol, Employees DefDstMol, Integer Revision, Date RevisionDateTime, Date RollUpDateTime, BigDecimal SetupTicks, BigDecimal RunTicks, ScheduleDirection ScheduleDirection, boolean UseMoveTimes, boolean UseQueueTimes, boolean UseFiniteCapacity, BigDecimal Priority, boolean PriorityFreezeFlag, BigDecimal PcsPerHrCell, boolean ApprovedFlag, boolean BomVersionRequired, boolean CreateJobApproved, String Comment, BigDecimal MinLotQty, BigDecimal MaxLotQty, BigDecimal LotIncrementQty, BigDecimal PlanningLotQty, Set<BomRoute> BomRoutes) {
        this.Catalog = Catalog;
        this.SetupTimeUM = SetupTimeUM;
        this.Folder = Folder;
        this.SysClient = SysClient;
        this.StandartCostDetail = StandartCostDetail;
        this.Cell = Cell;
        this.RunTimeUM = RunTimeUM;
        this.BomType = BomType;
        this.BomStatus = BomStatus;
        this.DefSrcStock = DefSrcStock;
        this.DefDstStock = DefDstStock;
        this.DefSrcMol = DefSrcMol;
        this.DefDstMol = DefDstMol;
        this.Revision = Revision;
        this.RevisionDateTime = RevisionDateTime;
        this.RollUpDateTime = RollUpDateTime;
        this.SetupTicks = SetupTicks;
        this.RunTicks = RunTicks;
        this.ScheduleDirection = ScheduleDirection;
        this.UseMoveTimes = UseMoveTimes;
        this.UseQueueTimes = UseQueueTimes;
        this.UseFiniteCapacity = UseFiniteCapacity;
        this.Priority = Priority;
        this.PriorityFreezeFlag = PriorityFreezeFlag;
        this.PcsPerHrCell = PcsPerHrCell;
        this.ApprovedFlag = ApprovedFlag;
        this.BomVersionRequired = BomVersionRequired;
        this.CreateJobApproved = CreateJobApproved;
        this.Comment = Comment;
        this.MinLotQty = MinLotQty;
        this.MaxLotQty = MaxLotQty;
        this.LotIncrementQty = LotIncrementQty;
        this.PlanningLotQty = PlanningLotQty;
        this.BomRoutes = BomRoutes;
    }

    @SequenceGenerator(name = "generator", sequenceName = "MF_BOM_ID_GEN")
    @Id
    @GeneratedValue(strategy = SEQUENCE, generator = "generator")
    @Column(name = "ID", unique = true, columnDefinition = "INTEGER")
    @DataItemName("ID")
    public Integer getId() {
        return this.Id;
    }

    public void setId(Integer Id) {
        this.Id = Id;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "CATALOG_ID")
    public Catalog getCatalog() {
        return this.Catalog;
    }

    public void setCatalog(Catalog Catalog) {
        this.Catalog = Catalog;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "SETUP_TIME_UM")
    @DataItemName("MfReference.BOM.SetupTimeUM")
    public Measure getSetupTimeUM() {
        return this.SetupTimeUM;
    }

    public void setSetupTimeUM(Measure SetupTimeUM) {
        this.SetupTimeUM = SetupTimeUM;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "FOLDER_ID")
    public Folder getFolder() {
        return this.Folder;
    }

    public void setFolder(Folder Folder) {
        this.Folder = Folder;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "CLIENT_ID")
    public SysClient getSysClient() {
        return this.SysClient;
    }

    public void setSysClient(SysClient SysClient) {
        this.SysClient = SysClient;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "STD_COST_DETAIL_ID")
    public CostDetail getStandartCostDetail() {
        return this.StandartCostDetail;
    }

    public void setStandartCostDetail(CostDetail StandartCostDetail) {
        this.StandartCostDetail = StandartCostDetail;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "CELL_ID")
    @DataItemName("MfReference.BOM.Cell")
    public Cell getCell() {
        return this.Cell;
    }

    public void setCell(Cell Cell) {
        this.Cell = Cell;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "RUN_TIME_UM")
    @DataItemName("MfReference.BOM.RunTimeUm")
    public Measure getRunTimeUM() {
        return this.RunTimeUM;
    }

    public void setRunTimeUM(Measure RunTimeUM) {
        this.RunTimeUM = RunTimeUM;
    }

    @Column(name = "BOM_TYPE")
    @Enumerated(EnumType.ORDINAL)
    public BomType getBomType() {
        return this.BomType;
    }

    public void setBomType(BomType BomType) {
        this.BomType = BomType;
    }

    @Column(name = "BOM_STATUS")
    @Enumerated(EnumType.ORDINAL)
    public BomStatus getBomStatus() {
        return this.BomStatus;
    }

    public void setBomStatus(BomStatus BomStatus) {
        this.BomStatus = BomStatus;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "DEF_SRC_STOCK_ID")
    @DataItemName("MfReference.BOM.DefSrcStock")
    public Warehouse getDefSrcStock() {
        return this.DefSrcStock;
    }

    public void setDefSrcStock(Warehouse DefSrcStock) {
        this.DefSrcStock = DefSrcStock;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "DEF_DST_STOCK_ID")
    @DataItemName("MfReference.BOM.DefDstStock")
    public Warehouse getDefDstStock() {
        return this.DefDstStock;
    }

    public void setDefDstStock(Warehouse DefDstStock) {
        this.DefDstStock = DefDstStock;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "DEF_SRC_MOL_ID")
    @DataItemName("MfReference.BOM.DefSrcMol")
    public Employees getDefSrcMol() {
        return this.DefSrcMol;
    }

    public void setDefSrcMol(Employees DefSrcMol) {
        this.DefSrcMol = DefSrcMol;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "DEF_DST_MOL_ID")
    @DataItemName("MfReference.BOM.DefDstMol")
    public Employees getDefDstMol() {
        return this.DefDstMol;
    }

    public void setDefDstMol(Employees DefDstMol) {
        this.DefDstMol = DefDstMol;
    }

    @Column(name = "REVISION", columnDefinition = "INTEGER")
    @DataItemName("MfReference.BOM.Revision")
    public Integer getRevision() {
        return this.Revision;
    }

    public void setRevision(Integer Revision) {
        this.Revision = Revision;
    }

    @Column(name = "REVISION_DATETIME", columnDefinition = "TIMESTAMP")
    @DataItemName("MfReference.BOM.RevisionDate")
    public Date getRevisionDateTime() {
        return this.RevisionDateTime;
    }

    public void setRevisionDateTime(Date RevisionDateTime) {
        this.RevisionDateTime = RevisionDateTime;
    }

    @Column(name = "ROLLUP_DATETIME", columnDefinition = "TIMESTAMP")
    @DataItemName("MfReference.BOM.RollUpDateTime")
    public Date getRollUpDateTime() {
        return this.RollUpDateTime;
    }

    public void setRollUpDateTime(Date RollUpDateTime) {
        this.RollUpDateTime = RollUpDateTime;
    }

    @Column(name = "SETUP_TICKS", columnDefinition = "NUMERIC", precision = 18, scale = 0)
    @DataItemName("MfReference.BOM.SetupTicks")
    public BigDecimal getSetupTicks() {
        return this.SetupTicks;
    }

    public void setSetupTicks(BigDecimal SetupTicks) {
        this.SetupTicks = SetupTicks;
    }

    @Column(name = "RUN_TICKS", columnDefinition = "NUMERIC", precision = 18, scale = 0)
    @DataItemName("MfReference.BOM.RunTicks")
    public BigDecimal getRunTicks() {
        return this.RunTicks;
    }

    public void setRunTicks(BigDecimal RunTicks) {
        this.RunTicks = RunTicks;
    }

    @Column(name = "SCHED_DIRECTION")
    @Enumerated(EnumType.ORDINAL)
    public ScheduleDirection getScheduleDirection() {
        return this.ScheduleDirection;
    }

    public void setScheduleDirection(ScheduleDirection ScheduleDirection) {
        this.ScheduleDirection = ScheduleDirection;
    }

    @Column(name = "USE_MOVE_TIMES", columnDefinition = "SMALLINT")
    @DataItemName("MfReference.BOM.UseMoveTimes")
    public boolean isUseMoveTimes() {
        return this.UseMoveTimes;
    }

    public void setUseMoveTimes(boolean UseMoveTimes) {
        this.UseMoveTimes = UseMoveTimes;
    }

    @Column(name = "USE_QUEUE_TIMES", columnDefinition = "SMALLINT")
    @DataItemName("MfReference.BOM.UseQueueTimes")
    public boolean isUseQueueTimes() {
        return this.UseQueueTimes;
    }

    public void setUseQueueTimes(boolean UseQueueTimes) {
        this.UseQueueTimes = UseQueueTimes;
    }

    @Column(name = "USE_FINITE_CAPACITY", columnDefinition = "SMALLINT")
    @DataItemName("MfReference.BOM.UseFiniteCapacity")
    public boolean isUseFiniteCapacity() {
        return this.UseFiniteCapacity;
    }

    public void setUseFiniteCapacity(boolean UseFiniteCapacity) {
        this.UseFiniteCapacity = UseFiniteCapacity;
    }

    @Column(name = "PRIORITY", columnDefinition = "NUMERIC", precision = 18, scale = 6)
    @DataItemName("MfReference.BOM.Priority")
    public BigDecimal getPriority() {
        return this.Priority;
    }

    public void setPriority(BigDecimal Priority) {
        this.Priority = Priority;
    }

    @Column(name = "PRIORITY_FREEZE_FLAG", columnDefinition = "SMALLINT")
    @DataItemName("MfReference.BOM.PriorityFreezeFlag")
    public boolean isPriorityFreezeFlag() {
        return this.PriorityFreezeFlag;
    }

    public void setPriorityFreezeFlag(boolean PriorityFreezeFlag) {
        this.PriorityFreezeFlag = PriorityFreezeFlag;
    }

    @Column(name = "PCS_PER_HR_CELL", columnDefinition = "NUMERIC", precision = 18, scale = 0)
    @DataItemName("MfReference.BOM.PcsPerHrCell")
    public BigDecimal getPcsPerHrCell() {
        return this.PcsPerHrCell;
    }

    public void setPcsPerHrCell(BigDecimal PcsPerHrCell) {
        this.PcsPerHrCell = PcsPerHrCell;
    }

    @Column(name = "APPROVED_FLAG", columnDefinition = "SMALLINT")
    @DataItemName("MfReference.BOM.ApprovedFlag")
    public boolean isApprovedFlag() {
        return this.ApprovedFlag;
    }

    public void setApprovedFlag(boolean ApprovedFlag) {
        this.ApprovedFlag = ApprovedFlag;
    }

    @Column(name = "BOM_VERSION_REQUIRED", columnDefinition = "SMALLINT")
    @DataItemName("MfReference.BomVersionRequired")
    public boolean isBomVersionRequired() {
        return this.BomVersionRequired;
    }

    public void setBomVersionRequired(boolean BomVersionRequired) {
        this.BomVersionRequired = BomVersionRequired;
    }

    @Column(name = "CREATE_JOB_APPROVED", columnDefinition = "SMALLINT")
    @DataItemName("MfReference.BOM.CreateJobApproved")
    public boolean isCreateJobApproved() {
        return this.CreateJobApproved;
    }

    public void setCreateJobApproved(boolean CreateJobApproved) {
        this.CreateJobApproved = CreateJobApproved;
    }

    @Column(name = "COMMENT", columnDefinition = "VARCHAR", length = 256)
    @DataItemName("MfReference.BOM.Comment")
    public String getComment() {
        return this.Comment;
    }

    public void setComment(String Comment) {
        this.Comment = Comment;
    }

    @Column(name = "MIN_LOT_QTY", columnDefinition = "NUMERIC", precision = 18, scale = 3)
    @DataItemName("MfReference.BOM.MinLotQty")
    public BigDecimal getMinLotQty() {
        return this.MinLotQty;
    }

    public void setMinLotQty(BigDecimal MinLotQty) {
        this.MinLotQty = MinLotQty;
    }

    @Column(name = "MAX_LOT_QTY", columnDefinition = "NUMERIC", precision = 18, scale = 3)
    @DataItemName("MfReference.BOM.MaxLotQty")
    public BigDecimal getMaxLotQty() {
        return this.MaxLotQty;
    }

    public void setMaxLotQty(BigDecimal MaxLotQty) {
        this.MaxLotQty = MaxLotQty;
    }

    @Column(name = "LOT_INCREMENT_QTY", columnDefinition = "NUMERIC", precision = 18, scale = 3)
    @DataItemName("MfReference.BOM.LotIncrementQty")
    public BigDecimal getLotIncrementQty() {
        return this.LotIncrementQty;
    }

    public void setLotIncrementQty(BigDecimal LotIncrementQty) {
        this.LotIncrementQty = LotIncrementQty;
    }

    @Column(name = "PLANNING_LOT_QTY", columnDefinition = "NUMERIC", precision = 18, scale = 3)
    @DataItemName("MfReference.BOM.PlanningLotQty")
    public BigDecimal getPlanningLotQty() {
        return this.PlanningLotQty;
    }

    public void setPlanningLotQty(BigDecimal PlanningLotQty) {
        this.PlanningLotQty = PlanningLotQty;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "Bom")
    public Set<BomRoute> getBomRoutes() {
        return this.BomRoutes;
    }

    public void setBomRoutes(Set<BomRoute> BomRoutes) {
        this.BomRoutes = BomRoutes;
    }
}

