package com.mg.merp.factura.model;

import com.mg.framework.support.orm.OmittedWhitespaceStringType;
import com.mg.merp.core.model.Folder;
import com.mg.merp.core.model.SysClient;
import com.mg.merp.core.model.SysCompany;
import com.mg.merp.document.model.DocHead;
import com.mg.merp.document.model.DocSection;
import com.mg.merp.document.model.DocType;
import com.mg.merp.reference.model.BankAccount;
import com.mg.merp.reference.model.CalcTaxesKind;
import com.mg.merp.reference.model.Contractor;
import com.mg.merp.reference.model.Currency;
import com.mg.merp.reference.model.CurrencyRateAuthority;
import com.mg.merp.reference.model.CurrencyRateType;
import com.mg.merp.reference.model.PriceListHead;
import com.mg.merp.reference.model.PriceType;
import java.math.BigDecimal;
import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

/**
 * FacturaHead generated by hbm2java
 */
@Entity
@Table(name = "FACTURAHEAD")
public class FacturaHead extends com.mg.merp.document.model.DocHead implements java.io.Serializable {

    private BankAccount PartnerToBankReq;

    private Contractor Consignee;

    private Contractor Shipper;

    private BankAccount PartnerFromBankReq;

    private Date InDate;

    private Date StockDate;

    private Date PayDate;

    private String ToPayDocNumber;

    private Date ToPayDocDate;

    private String Comment;

    public FacturaHead() {
    }

    public FacturaHead(SysCompany SysCompany, DocSection DocSection, Short Requester, boolean ManualDocNumber) {
        super(SysCompany, DocSection, Requester, ManualDocNumber);
    }

    public FacturaHead(SysCompany SysCompany, Contractor Through, Contractor From, CurrencyRateAuthority CurrencyRateAuthority, Contractor SrcMol, PriceType PriceType, Folder DiscountFolder, Folder Folder, DocType DocType, DocHead Contract, Currency Currency, Contractor SrcStock, DocType ContractType, Contractor To, Contractor DstMol, DocHead BaseDocument, SysClient SysClient, Contractor DstStock, CalcTaxesKind CalcTaxesKind, DocType BaseDocType, CurrencyRateType CurrencyRateType, PriceListHead PriceList, DocSection DocSection, OmittedWhitespaceStringType DocNumber, Date DocDate, BigDecimal CurCource, BigDecimal SumCur, BigDecimal SumNat, OmittedWhitespaceStringType BaseDocNumber, Date BaseDocDate, OmittedWhitespaceStringType ContractNumber, Date ContractDate, BigDecimal Weight, BigDecimal Volume, Short Requester, byte[] Original, String UNID, boolean ManualDocNumber, String Description, BankAccount PartnerToBankReq, Contractor Consignee, Contractor Shipper, BankAccount PartnerFromBankReq, Date InDate, Date StockDate, Date PayDate, String ToPayDocNumber, Date ToPayDocDate, String Comment) {
        super(SysCompany, Through, From, CurrencyRateAuthority, SrcMol, PriceType, DiscountFolder, Folder, DocType, Contract, Currency, SrcStock, ContractType, To, DstMol, BaseDocument, SysClient, DstStock, CalcTaxesKind, BaseDocType, CurrencyRateType, PriceList, DocSection, DocNumber, DocDate, CurCource, SumCur, SumNat, BaseDocNumber, BaseDocDate, ContractNumber, ContractDate, Weight, Volume, Requester, Original, UNID, ManualDocNumber, Description);
        this.PartnerToBankReq = PartnerToBankReq;
        this.Consignee = Consignee;
        this.Shipper = Shipper;
        this.PartnerFromBankReq = PartnerFromBankReq;
        this.InDate = InDate;
        this.StockDate = StockDate;
        this.PayDate = PayDate;
        this.ToPayDocNumber = ToPayDocNumber;
        this.ToPayDocDate = ToPayDocDate;
        this.Comment = Comment;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "PARTNERTO_BANKREQ")
    public BankAccount getPartnerToBankReq() {
        return this.PartnerToBankReq;
    }

    public void setPartnerToBankReq(BankAccount PartnerToBankReq) {
        this.PartnerToBankReq = PartnerToBankReq;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "CONSIGNEE")
    public Contractor getConsignee() {
        return this.Consignee;
    }

    public void setConsignee(Contractor Consignee) {
        this.Consignee = Consignee;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "SHIPPER")
    public Contractor getShipper() {
        return this.Shipper;
    }

    public void setShipper(Contractor Shipper) {
        this.Shipper = Shipper;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "PARTNERFROM_BANKREQ")
    public BankAccount getPartnerFromBankReq() {
        return this.PartnerFromBankReq;
    }

    public void setPartnerFromBankReq(BankAccount PartnerFromBankReq) {
        this.PartnerFromBankReq = PartnerFromBankReq;
    }

    @Column(name = "INDATE", columnDefinition = "TIMESTAMP")
    public Date getInDate() {
        return this.InDate;
    }

    public void setInDate(Date InDate) {
        this.InDate = InDate;
    }

    @Column(name = "STOCKDATE", columnDefinition = "TIMESTAMP")
    public Date getStockDate() {
        return this.StockDate;
    }

    public void setStockDate(Date StockDate) {
        this.StockDate = StockDate;
    }

    @Column(name = "PAYDATE", columnDefinition = "TIMESTAMP")
    public Date getPayDate() {
        return this.PayDate;
    }

    public void setPayDate(Date PayDate) {
        this.PayDate = PayDate;
    }

    @Column(name = "TOPAYDOCNUMBER", columnDefinition = "CHAR", length = 20)
    public String getToPayDocNumber() {
        return this.ToPayDocNumber;
    }

    public void setToPayDocNumber(String ToPayDocNumber) {
        this.ToPayDocNumber = ToPayDocNumber;
    }

    @Column(name = "TOPAYDOCDATE", columnDefinition = "TIMESTAMP")
    public Date getToPayDocDate() {
        return this.ToPayDocDate;
    }

    public void setToPayDocDate(Date ToPayDocDate) {
        this.ToPayDocDate = ToPayDocDate;
    }

    @Column(name = "COMMENT", columnDefinition = "VARCHAR", length = 1024)
    public String getComment() {
        return this.Comment;
    }

    public void setComment(String Comment) {
        this.Comment = Comment;
    }
}

