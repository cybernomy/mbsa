package com.mg.merp.scheduler.model;

import com.mg.merp.baiengine.model.Repository;
import com.mg.merp.core.model.Folder;
import com.mg.merp.core.model.SysClient;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.SEQUENCE;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import com.mg.framework.api.annotations.DataItemName;

/**
 * Task generated by hbm2java
 */
@Entity
@Table(name = "SCH_TASK")
@DataItemName("Scheduler.Task")
public class Task extends com.mg.merp.core.model.AbstractEntity implements java.io.Serializable {

    private Integer Id;

    private SysClient SysClient;

    private Folder Folder;

    private Repository BAi;

    private String Code;

    private String Name;

    private String Description;

    private String CronExpression;

    private boolean Active;

    public Task() {
    }

    public Task(Folder Folder, Repository BAi, String Code, String Name, String CronExpression) {
        this.Folder = Folder;
        this.BAi = BAi;
        this.Code = Code;
        this.Name = Name;
        this.CronExpression = CronExpression;
    }

    public Task(SysClient SysClient, Folder Folder, Repository BAi, String Code, String Name, String Description, String CronExpression, boolean Active) {
        this.SysClient = SysClient;
        this.Folder = Folder;
        this.BAi = BAi;
        this.Code = Code;
        this.Name = Name;
        this.Description = Description;
        this.CronExpression = CronExpression;
        this.Active = Active;
    }

    @SequenceGenerator(name = "generator", sequenceName = "SCH_TASK_ID_GEN")
    @Id
    @GeneratedValue(strategy = SEQUENCE, generator = "generator")
    @Column(name = "ID", unique = true, columnDefinition = "INTEGER")
    @DataItemName("ID")
    public Integer getId() {
        return this.Id;
    }

    public void setId(Integer Id) {
        this.Id = Id;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "CLIENT_ID")
    public SysClient getSysClient() {
        return this.SysClient;
    }

    public void setSysClient(SysClient SysClient) {
        this.SysClient = SysClient;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "FOLDER_ID", nullable = false)
    public Folder getFolder() {
        return this.Folder;
    }

    public void setFolder(Folder Folder) {
        this.Folder = Folder;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "ALGORITHM_ID", nullable = false)
    public Repository getBAi() {
        return this.BAi;
    }

    public void setBAi(Repository BAi) {
        this.BAi = BAi;
    }

    @Column(name = "CODE", nullable = false, columnDefinition = "VARCHAR", length = 20)
    @DataItemName("Scheduler.Code")
    public String getCode() {
        return this.Code;
    }

    public void setCode(String Code) {
        this.Code = Code;
    }

    @Column(name = "NAME", nullable = false, columnDefinition = "VARCHAR", length = 80)
    @DataItemName("Scheduler.Name")
    public String getName() {
        return this.Name;
    }

    public void setName(String Name) {
        this.Name = Name;
    }

    @Column(name = "DESCRIPTION", columnDefinition = "VARCHAR", length = 256)
    @DataItemName("Scheduler.Description")
    public String getDescription() {
        return this.Description;
    }

    public void setDescription(String Description) {
        this.Description = Description;
    }

    @Column(name = "CRON_EXPRESSION", nullable = false, columnDefinition = "VARCHAR", length = 256)
    @DataItemName("Scheduler.Task.CronExpression")
    public String getCronExpression() {
        return this.CronExpression;
    }

    public void setCronExpression(String CronExpression) {
        this.CronExpression = CronExpression;
    }

    @Column(name = "IS_ACTIVE", columnDefinition = "SMALLINT")
    @DataItemName("Scheduler.Task.IsActive")
    public boolean isActive() {
        return this.Active;
    }

    public void setActive(boolean Active) {
        this.Active = Active;
    }
}

