package com.mg.merp.contract.model;

import com.mg.merp.core.model.SysClient;
import com.mg.merp.document.model.DocHead;
import com.mg.merp.document.model.DocType;
import com.mg.merp.reference.model.BankAccount;
import com.mg.merp.reference.model.Contractor;
import com.mg.merp.reference.model.PartnerEmpl;
import java.math.BigDecimal;
import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.SEQUENCE;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import org.hibernate.annotations.Formula;
import javax.persistence.Enumerated;
import javax.persistence.EnumType;
import com.mg.framework.api.annotations.DataItemName;

/**
 * Phase generated by hbm2java
 */
@Entity
@Table(name = "CONTRACTPHASE")
public class Phase extends com.mg.merp.core.model.AbstractEntity implements java.io.Serializable {

    private Integer Id;

    private Contractor Consignee;

    private Contractor Shipper;

    private DocHead DocHead;

    private Contractor Company;

    private SysClient SysClient;

    private Contractor Contractor;

    private Contractor Responsible;

    private PartnerEmpl ContractorResponsible;

    private BankAccount BankReq;

    private BankAccount ConsigneeBankReq;

    private BankAccount ContractorBankReq;

    private BankAccount ShipperBankReq;

    private String PhaseNumber;

    private Date BeginActionDate;

    private Date EndActionDate;

    private String Description;

    private String Comments;

    private BigDecimal SumCur;

    private BigDecimal SumNat;

    private CalcSumKind CalcSumKind;

    private BigDecimal Margin;

    private boolean Avoid;

    private BigDecimal ShippedPayment;

    private BigDecimal ReceivedPayment;

    private BigDecimal ShippedGood;

    private BigDecimal ReceivedGood;

    private BigDecimal FactShippedPayment;

    private BigDecimal FactReceivedPayment;

    private BigDecimal FactShippedGood;

    private BigDecimal FactReceivedGood;

    private BigDecimal ItemShippedPayment;

    private BigDecimal ItemReceivedPayment;

    private BigDecimal ItemShippedGood;

    private BigDecimal ItemReceivedGood;

    private Short ContractorBankDays;

    private Short BankDays;

    private BigDecimal PennyRate;

    private BigDecimal ContractorPennyRate;

    private DocType DocType;

    private String DocNumber;

    private Date DocDate;

    private DocHead Document;

    public Phase() {
    }

    public Phase(Contractor Consignee, Contractor Shipper, DocHead DocHead, Contractor Company, SysClient SysClient, Contractor Contractor, Contractor Responsible, PartnerEmpl ContractorResponsible, BankAccount BankReq, BankAccount ConsigneeBankReq, BankAccount ContractorBankReq, BankAccount ShipperBankReq, String PhaseNumber, Date BeginActionDate, Date EndActionDate, String Description, String Comments, BigDecimal SumCur, BigDecimal SumNat, CalcSumKind CalcSumKind, BigDecimal Margin, boolean Avoid, BigDecimal ShippedPayment, BigDecimal ReceivedPayment, BigDecimal ShippedGood, BigDecimal ReceivedGood, Short ContractorBankDays, Short BankDays, BigDecimal PennyRate, BigDecimal ContractorPennyRate, DocType DocType, String DocNumber, Date DocDate, DocHead Document) {
        this.Consignee = Consignee;
        this.Shipper = Shipper;
        this.DocHead = DocHead;
        this.Company = Company;
        this.SysClient = SysClient;
        this.Contractor = Contractor;
        this.Responsible = Responsible;
        this.ContractorResponsible = ContractorResponsible;
        this.BankReq = BankReq;
        this.ConsigneeBankReq = ConsigneeBankReq;
        this.ContractorBankReq = ContractorBankReq;
        this.ShipperBankReq = ShipperBankReq;
        this.PhaseNumber = PhaseNumber;
        this.BeginActionDate = BeginActionDate;
        this.EndActionDate = EndActionDate;
        this.Description = Description;
        this.Comments = Comments;
        this.SumCur = SumCur;
        this.SumNat = SumNat;
        this.CalcSumKind = CalcSumKind;
        this.Margin = Margin;
        this.Avoid = Avoid;
        this.ShippedPayment = ShippedPayment;
        this.ReceivedPayment = ReceivedPayment;
        this.ShippedGood = ShippedGood;
        this.ReceivedGood = ReceivedGood;
        this.ContractorBankDays = ContractorBankDays;
        this.BankDays = BankDays;
        this.PennyRate = PennyRate;
        this.ContractorPennyRate = ContractorPennyRate;
        this.DocType = DocType;
        this.DocNumber = DocNumber;
        this.DocDate = DocDate;
        this.Document = Document;
    }

    @SequenceGenerator(name = "generator", sequenceName = "CONTRACTPHASE_ID_GEN")
    @Id
    @GeneratedValue(strategy = SEQUENCE, generator = "generator")
    @Column(name = "ID", unique = true, columnDefinition = "INTEGER")
    //$NON-NLS-1$
    @DataItemName("ID")
    public Integer getId() {
        return this.Id;
    }

    public void setId(Integer Id) {
        this.Id = Id;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "CONSIGNEE")
    //$NON-NLS-1$
    @DataItemName("Contract.Consignee")
    public Contractor getConsignee() {
        return this.Consignee;
    }

    public void setConsignee(Contractor Consignee) {
        this.Consignee = Consignee;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "SHIPPER")
    //$NON-NLS-1$
    @DataItemName("Contract.Shipper")
    public Contractor getShipper() {
        return this.Shipper;
    }

    public void setShipper(Contractor Shipper) {
        this.Shipper = Shipper;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "DOCHEAD_ID")
    public DocHead getDocHead() {
        return this.DocHead;
    }

    public void setDocHead(DocHead DocHead) {
        this.DocHead = DocHead;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "COMPANY")
    //$NON-NLS-1$
    @DataItemName("Contract.Phase.Company")
    public Contractor getCompany() {
        return this.Company;
    }

    public void setCompany(Contractor Company) {
        this.Company = Company;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "CLIENT_ID")
    public SysClient getSysClient() {
        return this.SysClient;
    }

    public void setSysClient(SysClient SysClient) {
        this.SysClient = SysClient;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "CONTRACTOR_ID")
    //$NON-NLS-1$
    @DataItemName("Contract.Phase.Contractor")
    public Contractor getContractor() {
        return this.Contractor;
    }

    public void setContractor(Contractor Contractor) {
        this.Contractor = Contractor;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "RESPONSIBLE")
    //$NON-NLS-1$
    @DataItemName("Contract.Phase.Responsible")
    public Contractor getResponsible() {
        return this.Responsible;
    }

    public void setResponsible(Contractor Responsible) {
        this.Responsible = Responsible;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "CONTRACTOR_RESPONSIBLE")
    //$NON-NLS-1$
    @DataItemName("Contract.Phase.ContrResponsible")
    public PartnerEmpl getContractorResponsible() {
        return this.ContractorResponsible;
    }

    public void setContractorResponsible(PartnerEmpl ContractorResponsible) {
        this.ContractorResponsible = ContractorResponsible;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "BANKREQ_ID")
    //$NON-NLS-1$
    @DataItemName("Contract.Phase.BankReq")
    public BankAccount getBankReq() {
        return this.BankReq;
    }

    public void setBankReq(BankAccount BankReq) {
        this.BankReq = BankReq;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "CONSIGNEEBANKREQ_ID")
    //$NON-NLS-1$
    @DataItemName("Contract.ConsigneeBankReq")
    public BankAccount getConsigneeBankReq() {
        return this.ConsigneeBankReq;
    }

    public void setConsigneeBankReq(BankAccount ConsigneeBankReq) {
        this.ConsigneeBankReq = ConsigneeBankReq;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "CONTRACTORBANKREQ_ID")
    //$NON-NLS-1$
    @DataItemName("Contract.Phase.ContrBankReq")
    public BankAccount getContractorBankReq() {
        return this.ContractorBankReq;
    }

    public void setContractorBankReq(BankAccount ContractorBankReq) {
        this.ContractorBankReq = ContractorBankReq;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "SHIPPERBANKREQ_ID")
    //$NON-NLS-1$
    @DataItemName("Contract.ShipperBankReq")
    public BankAccount getShipperBankReq() {
        return this.ShipperBankReq;
    }

    public void setShipperBankReq(BankAccount ShipperBankReq) {
        this.ShipperBankReq = ShipperBankReq;
    }

    @Column(name = "PHASE_NUMBER", columnDefinition = "CHAR", length = 20)
    //$NON-NLS-1$
    @DataItemName("Contract.Phase.Number")
    public String getPhaseNumber() {
        return this.PhaseNumber;
    }

    public void setPhaseNumber(String PhaseNumber) {
        this.PhaseNumber = PhaseNumber;
    }

    @Column(name = "BEGINACTION_DATE", columnDefinition = "TIMESTAMP")
    //$NON-NLS-1$
    @DataItemName("Contract.Phase.BeginActionDate")
    public Date getBeginActionDate() {
        return this.BeginActionDate;
    }

    public void setBeginActionDate(Date BeginActionDate) {
        this.BeginActionDate = BeginActionDate;
    }

    @Column(name = "ENDACTION_DATE", columnDefinition = "TIMESTAMP")
    //$NON-NLS-1$
    @DataItemName("Contract.Phase.EndActionDate")
    public Date getEndActionDate() {
        return this.EndActionDate;
    }

    public void setEndActionDate(Date EndActionDate) {
        this.EndActionDate = EndActionDate;
    }

    @Column(name = "DESCRIPTION", columnDefinition = "VARCHAR", length = 2048)
    //$NON-NLS-1$
    @DataItemName("Contract.Phase.Description")
    public String getDescription() {
        return this.Description;
    }

    public void setDescription(String Description) {
        this.Description = Description;
    }

    @Column(name = "COMMENTS", columnDefinition = "VARCHAR", length = 2048)
    //$NON-NLS-1$
    @DataItemName("Contract.Phase.Comments")
    public String getComments() {
        return this.Comments;
    }

    public void setComments(String Comments) {
        this.Comments = Comments;
    }

    @Column(name = "SUMCUR", columnDefinition = "NUMERIC", precision = 15, scale = 4)
    //$NON-NLS-1$
    @DataItemName("Contract.Phase.SumNat")
    public BigDecimal getSumCur() {
        return this.SumCur;
    }

    public void setSumCur(BigDecimal SumCur) {
        this.SumCur = SumCur;
    }

    @Column(name = "SUMNAT", columnDefinition = "NUMERIC", precision = 15, scale = 4)
    public BigDecimal getSumNat() {
        return this.SumNat;
    }

    public void setSumNat(BigDecimal SumNat) {
        this.SumNat = SumNat;
    }

    @Column(name = "CALCSUMKIND")
    @Enumerated(EnumType.ORDINAL)
    public CalcSumKind getCalcSumKind() {
        return this.CalcSumKind;
    }

    public void setCalcSumKind(CalcSumKind CalcSumKind) {
        this.CalcSumKind = CalcSumKind;
    }

    @Column(name = "MARGIN", columnDefinition = "NUMERIC", precision = 18, scale = 6)
    public BigDecimal getMargin() {
        return this.Margin;
    }

    public void setMargin(BigDecimal Margin) {
        this.Margin = Margin;
    }

    @Column(name = "AVOID", columnDefinition = "SMALLINT")
    public boolean isAvoid() {
        return this.Avoid;
    }

    public void setAvoid(boolean Avoid) {
        this.Avoid = Avoid;
    }

    @Column(name = "SHIPPEDPAYMENT", columnDefinition = "NUMERIC", precision = 15, scale = 4)
    //$NON-NLS-1$
    @DataItemName("Contract.ShippedPayment")
    public BigDecimal getShippedPayment() {
        return this.ShippedPayment;
    }

    public void setShippedPayment(BigDecimal ShippedPayment) {
        this.ShippedPayment = ShippedPayment;
    }

    @Column(name = "RECEIVEDPAYMENT", columnDefinition = "NUMERIC", precision = 15, scale = 4)
    //$NON-NLS-1$
    @DataItemName("Contract.ReceivedPayment")
    public BigDecimal getReceivedPayment() {
        return this.ReceivedPayment;
    }

    public void setReceivedPayment(BigDecimal ReceivedPayment) {
        this.ReceivedPayment = ReceivedPayment;
    }

    @Column(name = "SHIPPEDGOOD", columnDefinition = "NUMERIC", precision = 15, scale = 4)
    //$NON-NLS-1$
    @DataItemName("Contract.ShippedGood")
    public BigDecimal getShippedGood() {
        return this.ShippedGood;
    }

    public void setShippedGood(BigDecimal ShippedGood) {
        this.ShippedGood = ShippedGood;
    }

    @Column(name = "RECEIVEDGOOD", columnDefinition = "NUMERIC", precision = 15, scale = 4)
    //$NON-NLS-1$
    @DataItemName("Contract.ReceivedGood")
    public BigDecimal getReceivedGood() {
        return this.ReceivedGood;
    }

    public void setReceivedGood(BigDecimal ReceivedGood) {
        this.ReceivedGood = ReceivedGood;
    }

    @Formula(value = "(select sum(phaseitemplan.factsum) from phaseitemplan where (phaseitemplan.kind = 0) and (phaseitemplan.phase_id = ID))")
    //$NON-NLS-1$
    @DataItemName("Contract.FactShippedPayment")
    public BigDecimal getFactShippedPayment() {
        return this.FactShippedPayment;
    }

    public void setFactShippedPayment(BigDecimal FactShippedPayment) {
        this.FactShippedPayment = FactShippedPayment;
    }

    @Formula(value = "(select sum(phaseitemplan.factsum) from phaseitemplan where (phaseitemplan.kind = 1) and (phaseitemplan.phase_id = ID))")
    //$NON-NLS-1$
    @DataItemName("Contract.FactReceivedPayment")
    public BigDecimal getFactReceivedPayment() {
        return this.FactReceivedPayment;
    }

    public void setFactReceivedPayment(BigDecimal FactReceivedPayment) {
        this.FactReceivedPayment = FactReceivedPayment;
    }

    @Formula(value = "(select sum(phaseitemplan.factsum) from phaseitemplan where (phaseitemplan.kind = 2) and (phaseitemplan.phase_id = ID))")
    //$NON-NLS-1$
    @DataItemName("Contract.FactShippedGood")
    public BigDecimal getFactShippedGood() {
        return this.FactShippedGood;
    }

    public void setFactShippedGood(BigDecimal FactShippedGood) {
        this.FactShippedGood = FactShippedGood;
    }

    @Formula(value = "(select sum(phaseitemplan.factsum) from phaseitemplan where (phaseitemplan.kind = 3) and (phaseitemplan.phase_id = ID))")
    //$NON-NLS-1$
    @DataItemName("Contract.FactReceivedGood")
    public BigDecimal getFactReceivedGood() {
        return this.FactReceivedGood;
    }

    public void setFactReceivedGood(BigDecimal FactReceivedGood) {
        this.FactReceivedGood = FactReceivedGood;
    }

    @Formula(value = "(select sum(phaseitemplan.plansum) from phaseitemplan where (phaseitemplan.kind = 0) and (phaseitemplan.phase_id = ID))")
    //$NON-NLS-1$
    @DataItemName("Contract.PhaseShippedPayment")
    public BigDecimal getItemShippedPayment() {
        return this.ItemShippedPayment;
    }

    public void setItemShippedPayment(BigDecimal ItemShippedPayment) {
        this.ItemShippedPayment = ItemShippedPayment;
    }

    @Formula(value = "(select sum(phaseitemplan.plansum) from phaseitemplan where (phaseitemplan.kind = 1) and (phaseitemplan.phase_id = ID))")
    //$NON-NLS-1$
    @DataItemName("Contract.PhaseReceivedPayment")
    public BigDecimal getItemReceivedPayment() {
        return this.ItemReceivedPayment;
    }

    public void setItemReceivedPayment(BigDecimal ItemReceivedPayment) {
        this.ItemReceivedPayment = ItemReceivedPayment;
    }

    @Formula(value = "(select sum(phaseitemplan.plansum) from phaseitemplan where (phaseitemplan.kind = 2) and (phaseitemplan.phase_id = ID))")
    //$NON-NLS-1$
    @DataItemName("Contract.PhaseShippedGood")
    public BigDecimal getItemShippedGood() {
        return this.ItemShippedGood;
    }

    public void setItemShippedGood(BigDecimal ItemShippedGood) {
        this.ItemShippedGood = ItemShippedGood;
    }

    @Formula(value = "(select sum(phaseitemplan.plansum) from phaseitemplan where (phaseitemplan.kind = 3) and (phaseitemplan.phase_id = ID))")
    //$NON-NLS-1$
    @DataItemName("Contract.PhaseReceivedGood")
    public BigDecimal getItemReceivedGood() {
        return this.ItemReceivedGood;
    }

    public void setItemReceivedGood(BigDecimal ItemReceivedGood) {
        this.ItemReceivedGood = ItemReceivedGood;
    }

    @Column(name = "CONTRACTORBANKDAYS", columnDefinition = "SMALLINT")
    //$NON-NLS-1$
    @DataItemName("Contract.Phase.ContractorBankDays")
    public Short getContractorBankDays() {
        return this.ContractorBankDays;
    }

    public void setContractorBankDays(Short ContractorBankDays) {
        this.ContractorBankDays = ContractorBankDays;
    }

    @Column(name = "BANKDAYS", columnDefinition = "SMALLINT")
    //$NON-NLS-1$
    @DataItemName("Contract.Phase.BankDays")
    public Short getBankDays() {
        return this.BankDays;
    }

    public void setBankDays(Short BankDays) {
        this.BankDays = BankDays;
    }

    @Column(name = "PENNY_RATE", columnDefinition = "NUMERIC", precision = 18, scale = 6)
    //$NON-NLS-1$
    @DataItemName("Contract.Phase.PennyRate")
    public BigDecimal getPennyRate() {
        return this.PennyRate;
    }

    public void setPennyRate(BigDecimal PennyRate) {
        this.PennyRate = PennyRate;
    }

    @Column(name = "CONTRACTORPENNY_RATE", columnDefinition = "NUMERIC", precision = 18, scale = 6)
    //$NON-NLS-1$
    @DataItemName("Contract.Phase.ContractorPennyRate")
    public BigDecimal getContractorPennyRate() {
        return this.ContractorPennyRate;
    }

    public void setContractorPennyRate(BigDecimal ContractorPennyRate) {
        this.ContractorPennyRate = ContractorPennyRate;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "DOCTYPE")
    //$NON-NLS-1$
    @DataItemName("Document.DocType")
    public DocType getDocType() {
        return this.DocType;
    }

    public void setDocType(DocType DocType) {
        this.DocType = DocType;
    }

    @Column(name = "DOCNUMBER", columnDefinition = "CHAR", length = 20)
    //$NON-NLS-1$
    @DataItemName("Document.DocNumber")
    public String getDocNumber() {
        return this.DocNumber;
    }

    public void setDocNumber(String DocNumber) {
        this.DocNumber = DocNumber;
    }

    @Column(name = "DOCDATE", columnDefinition = "TIMESTAMP")
    //$NON-NLS-1$
    @DataItemName("Document.DocDate")
    public Date getDocDate() {
        return this.DocDate;
    }

    public void setDocDate(Date DocDate) {
        this.DocDate = DocDate;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "DOC_ID")
    public DocHead getDocument() {
        return this.Document;
    }

    public void setDocument(DocHead Document) {
        this.Document = Document;
    }
}

